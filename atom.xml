<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>drqblog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-15T04:00:49.904Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Victor Drq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用TensorFlow模拟线性回归(Linear Regression)</title>
    <link href="http://yoursite.com/2018/12/15/%E5%88%A9%E7%94%A8TensorFlow%E6%A8%A1%E6%8B%9F%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-Linear-Regression/"/>
    <id>http://yoursite.com/2018/12/15/利用TensorFlow模拟线性回归-Linear-Regression/</id>
    <published>2018-12-15T03:38:06.000Z</published>
    <updated>2018-12-15T04:00:49.904Z</updated>
    
    <content type="html"><![CDATA[<p><strong>线性回归(Linear Regression）</strong></p><ul><li>线性回归是利用数理统计中回归分析，来确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法，运用十分广泛。其表达形式为<strong>y = w’x+e</strong>，e为误差服从均值为0的正态分布</li><li>回归分析中，只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。</li><li><strong>梯度下降</strong>是用于找到函数最小值的一阶迭代优化算法。为了使用梯度下降找到函数的局部最小值，需要采用与当前点处函数的梯度（或近似梯度）的负值成比例的步长。相反，如果采用与梯度的正值成比例的步长，则接近该函数的局部最大值 ; 然后将该过程称为梯度上升。</li></ul><p><strong>废话不多说，直接上代码，展示运行效果</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Linear Regression线性回归</span></span><br><span class="line"><span class="comment">#author:victor</span></span><br><span class="line"><span class="keyword">from</span> future <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#generate number</span></span><br><span class="line">rng = numpy.random</span><br><span class="line"></span><br><span class="line"><span class="comment"># Parameters</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">training_epochs = <span class="number">1000</span></span><br><span class="line">display_step = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Training Data</span></span><br><span class="line"><span class="comment">#numpy.asarray和array都可以讲结构数据转化为ndarray</span></span><br><span class="line"><span class="comment">#区别：当数据源是ndarray时，array仍然会copy出一个副本，占用新的内存，#但是asarray不会</span></span><br><span class="line">train_X = numpy.asarray([<span class="number">3.3</span>,<span class="number">4.4</span>,<span class="number">5.5</span>,<span class="number">6.71</span>,<span class="number">6.93</span>,<span class="number">4.168</span>,<span class="number">9.779</span>,<span class="number">6.182</span>,<span class="number">7.59</span>,<span class="number">2.167</span>,</span><br><span class="line">                         <span class="number">7.042</span>,<span class="number">10.791</span>,<span class="number">5.313</span>,<span class="number">7.997</span>,<span class="number">5.654</span>,<span class="number">9.27</span>,<span class="number">3.1</span>])</span><br><span class="line">train_Y = numpy.asarray([<span class="number">1.7</span>,<span class="number">2.76</span>,<span class="number">2.09</span>,<span class="number">3.19</span>,<span class="number">1.694</span>,<span class="number">1.573</span>,<span class="number">3.366</span>,<span class="number">2.596</span>,<span class="number">2.53</span>,<span class="number">1.221</span>,</span><br><span class="line">                         <span class="number">2.827</span>,<span class="number">3.465</span>,<span class="number">1.65</span>,<span class="number">2.904</span>,<span class="number">2.42</span>,<span class="number">2.94</span>,<span class="number">1.3</span>])</span><br><span class="line"></span><br><span class="line">n_samples = train_X.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># tf Graph Input</span></span><br><span class="line">X = tf.placeholder(<span class="string">"float"</span>)</span><br><span class="line">Y = tf.placeholder(<span class="string">"float"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set model weights</span></span><br><span class="line">W = tf.Variable(rng.randn(), name=<span class="string">"weight"</span>)</span><br><span class="line">b = tf.Variable(rng.randn(), name=<span class="string">"bias"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct a linear model</span></span><br><span class="line">pred = tf.add(tf.multiply(X, W), b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mean squared error</span></span><br><span class="line">cost = tf.reduce_sum(tf.pow(pred-Y, <span class="number">2</span>))/(<span class="number">2</span>*n_samples)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gradient descent</span></span><br><span class="line"><span class="comment">#  Note, minimize() knows to modify W and b because Variable objects are #trainable=True by default</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#优化器，采用梯度下降方法来训练学习</span></span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the variables (i.e. assign their default value)</span></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Start training</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment"># Run the initializer</span></span><br><span class="line">    sess.run(init)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Fit all training data</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(training_epochs):</span><br><span class="line">        <span class="keyword">for</span> (x, y) <span class="keyword">in</span> zip(train_X, train_Y):</span><br><span class="line">            sess.run(optimizer, feed_dict=&#123;X: x, Y: y&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Display logs per epoch step(控制台显示每次步骤)</span></span><br><span class="line">        <span class="keyword">if</span> (epoch+<span class="number">1</span>) % display_step == <span class="number">0</span>:</span><br><span class="line">            c = sess.run(cost, feed_dict=&#123;X: train_X, Y:train_Y&#125;)</span><br><span class="line">            print(<span class="string">"Epoch:"</span>, <span class="string">'%04d'</span> % (epoch+<span class="number">1</span>), <span class="string">"cost="</span>, <span class="string">"&#123;:.9f&#125;"</span>.format(c), \</span><br><span class="line">                <span class="string">"W="</span>, sess.run(W), <span class="string">"b="</span>, sess.run(b))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Optimization Finished!"</span>)</span><br><span class="line">    training_cost = sess.run(cost, feed_dict=&#123;X: train_X, Y: train_Y&#125;)</span><br><span class="line">    print(<span class="string">"Training cost="</span>, training_cost, <span class="string">"W="</span>, sess.run(W), <span class="string">"b="</span>, sess.run(b), <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Graphic display(图像展示）the original data on the graph</span></span><br><span class="line">    plt.plot(train_X, train_Y, <span class="string">'ro'</span>, label=<span class="string">'Original data'</span>)</span><br><span class="line">    plt.plot(train_X, sess.run(W) * train_X + sess.run(b), label=<span class="string">'Fitted line'</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Testing example, as requested (Issue #2)</span></span><br><span class="line">    test_X = numpy.asarray([<span class="number">6.83</span>, <span class="number">4.668</span>, <span class="number">8.9</span>, <span class="number">7.91</span>, <span class="number">5.7</span>, <span class="number">8.7</span>, <span class="number">3.1</span>, <span class="number">2.1</span>])</span><br><span class="line">    test_Y = numpy.asarray([<span class="number">1.84</span>, <span class="number">2.273</span>, <span class="number">3.2</span>, <span class="number">2.831</span>, <span class="number">2.92</span>, <span class="number">3.24</span>, <span class="number">1.35</span>, <span class="number">1.03</span>])</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Testing... (Mean square loss Comparison)"</span>)</span><br><span class="line"></span><br><span class="line">    testing_cost = sess.run(</span><br><span class="line">        tf.reduce_sum(tf.pow(pred - Y, <span class="number">2</span>)) / (<span class="number">2</span> * test_X.shape[<span class="number">0</span>]),</span><br><span class="line">        feed_dict=&#123;X: test_X, Y: test_Y&#125;)  <span class="comment"># same function as cost above</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Testing cost="</span>, testing_cost)</span><br><span class="line">    print(<span class="string">"Absolute mean square loss difference:"</span>, abs(</span><br><span class="line">        training_cost - testing_cost))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#display the Test data on the graph</span></span><br><span class="line">    plt.plot(test_X, test_Y, <span class="string">'bo'</span>, label=<span class="string">'Testing data'</span>)</span><br><span class="line">    plt.plot(train_X, sess.run(W) * train_X + sess.run(b), label=<span class="string">'Fitted line'</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p><strong>控制台的每一次梯度下降后的误差值：</strong></p><p><img src="/2018/12/15/利用TensorFlow模拟线性回归-Linear-Regression/线性回归控制台步骤.png" alt="Linear Regression"></p><p><strong>线性回归后的结果图展示：</strong></p><p><img src="/2018/12/15/利用TensorFlow模拟线性回归-Linear-Regression/线性回归图像.png" alt="Linear Regression"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;线性回归(Linear Regression）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线性回归是利用数理统计中回归分析，来确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法，运用十分广泛。其表达形式为&lt;strong&gt;y = w’x+e&lt;/st
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://yoursite.com/categories/TensorFlow/"/>
    
    
  </entry>
  
  <entry>
    <title>用matplotlib包画函数图像</title>
    <link href="http://yoursite.com/2018/12/15/%E7%94%A8matplotlib%E5%8C%85%E7%94%BB%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F/"/>
    <id>http://yoursite.com/2018/12/15/用matplotlib包画函数图像/</id>
    <published>2018-12-15T03:25:31.000Z</published>
    <updated>2018-12-15T04:15:45.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="画Sinx函数图像"><a href="#画Sinx函数图像" class="headerlink" title="画Sinx函数图像"></a>画Sinx函数图像</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#正弦函数图像</span></span><br><span class="line"><span class="comment">#author:victor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#import module</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#generate number</span></span><br><span class="line">x=np.arange(<span class="number">0</span>,<span class="number">2</span>*np.pi,<span class="number">0.00001</span>)</span><br><span class="line">y=np.sin(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#display the graph</span></span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/12/15/用matplotlib包画函数图像/sinx的图像.png" alt="sinx"></p><h2 id="画cosx-x的图像"><a href="#画cosx-x的图像" class="headerlink" title="画cosx/x的图像"></a>画cosx/x的图像</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#画出cosx/x的图像</span></span><br><span class="line"><span class="comment">#author:victor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#import module</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#define function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.cos(x*<span class="number">30</span>)/x</span><br><span class="line"></span><br><span class="line"><span class="comment">#generate number</span></span><br><span class="line">g=np.frompyfunc(f,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">a=np.arange(<span class="number">0.1</span>,<span class="number">2</span>*np.pi,<span class="number">0.00001</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#use the function</span></span><br><span class="line">d=g(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#set maxsize</span></span><br><span class="line">d_max=np.max(d)</span><br><span class="line"><span class="comment">#set minsize</span></span><br><span class="line">d_min=np.min(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#display the graph</span></span><br><span class="line">plt.figure(figsize=(<span class="number">52</span>,<span class="number">23.65</span>))</span><br><span class="line">plt.xlim((<span class="number">-0.1</span>,<span class="number">2</span>*np.pi+<span class="number">0.1</span>))</span><br><span class="line">plt.ylim((<span class="number">-5</span>,<span class="number">5</span>))</span><br><span class="line">plt.plot(a,d,<span class="string">'-'</span>,c=<span class="string">'g'</span>,lw=<span class="number">2</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/12/15/用matplotlib包画函数图像/cosx除以x的图像.png" alt="cosx/x"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;画Sinx函数图像&quot;&gt;&lt;a href=&quot;#画Sinx函数图像&quot; class=&quot;headerlink&quot; title=&quot;画Sinx函数图像&quot;&gt;&lt;/a&gt;画Sinx函数图像&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://yoursite.com/categories/TensorFlow/"/>
    
    
  </entry>
  
  <entry>
    <title>用matplotlib包画箱型图</title>
    <link href="http://yoursite.com/2018/12/15/%E7%94%A8matplotlib%E5%8C%85%E7%94%BB%E7%AE%B1%E5%9E%8B%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/12/15/用matplotlib包画箱型图/</id>
    <published>2018-12-15T03:22:05.000Z</published>
    <updated>2018-12-15T04:11:09.299Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#箱型图</span></span><br><span class="line"><span class="comment">#author:victor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#import module</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#normal distribution</span></span><br><span class="line">data=np.random.normal(loc=<span class="number">0</span>,scale=<span class="number">1</span>,size=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sym点的形状，whis虚线的长度</span></span><br><span class="line">plt.boxplot(data,sym=<span class="string">'o'</span>,whis=<span class="number">1.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#display the graph</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/12/15/用matplotlib包画箱型图/箱型图.png" alt="box"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://yoursite.com/categories/TensorFlow/"/>
    
    
  </entry>
  
  <entry>
    <title>用matplotlib包画饼状图</title>
    <link href="http://yoursite.com/2018/12/15/%E7%94%A8matplotlib%E5%8C%85%E7%94%BB%E9%A5%BC%E7%8A%B6%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/12/15/用matplotlib包画饼状图/</id>
    <published>2018-12-15T03:19:44.000Z</published>
    <updated>2018-12-15T04:06:13.186Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#饼状图</span></span><br><span class="line"><span class="comment">#author：victor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#导入模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置labels标签参数，x是对应的数据列表，autopct显示每一个区域占的比例</span></span><br><span class="line"><span class="comment">#explode突出显示某一块，shadow阴影</span></span><br><span class="line">labels=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>]</span><br><span class="line">fracs=[<span class="number">15</span>,<span class="number">30</span>,<span class="number">45</span>,<span class="number">10</span>]</span><br><span class="line">explode=[<span class="number">0</span>,<span class="number">0.1</span>,<span class="number">0.05</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置x,y轴比例1:1，从而得到一个正的圆</span></span><br><span class="line">plt.axes(aspect=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#labels标签参数，x是对应的数据列表，autopct显示每一个区域占的比例，</span></span><br><span class="line"><span class="comment">#explode突出显示某一块，shadow阴影</span></span><br><span class="line">plt.pie(x=fracs,labels=labels,autopct=<span class="string">"%.0f%%"</span>,explode=explode,shadow=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#display the graph</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/12/15/用matplotlib包画饼状图/饼状图.png" alt="pie graph"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://yoursite.com/categories/TensorFlow/"/>
    
    
  </entry>
  
  <entry>
    <title>用matplotlib包画条形图</title>
    <link href="http://yoursite.com/2018/12/15/%E7%94%A8matplotlib%E5%8C%85%E7%94%BB%E6%9D%A1%E5%BD%A2%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/12/15/用matplotlib包画条形图/</id>
    <published>2018-12-15T03:17:43.000Z</published>
    <updated>2018-12-15T04:09:08.539Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#条形图</span></span><br><span class="line"><span class="comment">#author:victor</span></span><br><span class="line"><span class="comment">#导入模块</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#产生随机数</span></span><br><span class="line">data = np.random.normal(<span class="number">0</span>, <span class="number">20</span>, <span class="number">1000</span>)</span><br><span class="line">bins = np.arange(<span class="number">-100</span>, <span class="number">100</span>, <span class="number">5</span>) <span class="comment"># fixed bin size</span></span><br><span class="line"></span><br><span class="line">plt.xlim([min(data)<span class="number">-5</span>, max(data)+<span class="number">5</span>])</span><br><span class="line">plt.hist(data, bins=bins, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#display the graph</span></span><br><span class="line">plt.title(<span class="string">'Random Gaussian data (fixed bin size)'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'variable X (bin size = 5)'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'count'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/12/15/用matplotlib包画条形图/条形图.png" alt="gaussian graph"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://yoursite.com/categories/TensorFlow/"/>
    
    
  </entry>
  
  <entry>
    <title>用matplotlib包画折线图</title>
    <link href="http://yoursite.com/2018/12/15/%E7%94%A8matplotlib%E5%8C%85%E7%94%BB%E6%8A%98%E7%BA%BF%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/12/15/用matplotlib包画折线图/</id>
    <published>2018-12-15T03:14:30.000Z</published>
    <updated>2018-12-15T04:11:46.226Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#折线图</span></span><br><span class="line"><span class="comment">#author:victor</span></span><br><span class="line"><span class="comment">#导入模块</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成数据</span></span><br><span class="line">x=np.linspace(<span class="number">-10000</span>,<span class="number">10000</span>,<span class="number">100</span>) <span class="comment">#将-10000到10000等区间分成100份</span></span><br><span class="line">y=x2+x3+x**<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示图像</span></span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/12/15/用matplotlib包画折线图/折线图.png" alt="line"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="折线图" scheme="http://yoursite.com/categories/%E6%8A%98%E7%BA%BF%E5%9B%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>用matplotlib包画散点图</title>
    <link href="http://yoursite.com/2018/12/15/%E7%94%A8matplotlib%E5%8C%85%E7%94%BB%E6%95%A3%E7%82%B9%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/12/15/用matplotlib包画散点图/</id>
    <published>2018-12-15T03:08:48.000Z</published>
    <updated>2018-12-15T04:08:28.924Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Scatter函数是一个强大的画散点图函数：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.scatter(x, y, s=<span class="keyword">None</span>, c=<span class="keyword">None</span>, marker=<span class="keyword">None</span>, cmap=<span class="keyword">None</span>, norm=<span class="keyword">None</span>, vmin=<span class="keyword">None</span>, vmax=<span class="keyword">None</span>, alpha=<span class="keyword">None</span>, linewidths=<span class="keyword">None</span>, verts=<span class="keyword">None</span>, edgecolors=<span class="keyword">None</span>, *, data=<span class="keyword">None</span>, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment">#x,y：表示数据的位置，也就是x,y轴</span></span><br><span class="line"><span class="comment">#s：表示图形的大小</span></span><br><span class="line"><span class="comment">#c：表示颜色或颜色序列，可能的情况如下： </span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  1. 单一颜色</span></span><br><span class="line"><span class="string">  2. 颜色序列</span></span><br><span class="line"><span class="string">  3. 使用cmap映射到颜色的序列数</span></span><br><span class="line"><span class="string">  4. 一个行为RGB的2-D数组</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">marker：绘出的图形的形状，具有多种风格 </span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p><strong>一、画散点图(一)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#散点图</span></span><br><span class="line"><span class="comment">#导入必要的模块</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#参数随机数</span></span><br><span class="line">N=<span class="number">50</span></span><br><span class="line">x=np.random.randn(N)</span><br><span class="line">y=np.random.randn(N)</span><br><span class="line"></span><br><span class="line"><span class="comment">#画散点图</span></span><br><span class="line">plt.scatter(x,y,s=<span class="number">50</span>,c=<span class="string">'r'</span>,marker=<span class="string">'o'</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line"><span class="comment">#x---&gt;x轴，y---&gt;y轴</span></span><br><span class="line"><span class="comment">#s---&gt;散点面积</span></span><br><span class="line"><span class="comment">#c---&gt;散点颜色</span></span><br><span class="line"><span class="comment">#颜色参数c：b--&gt;blue  c--&gt;cyan g--&gt;green  k--&gt;black  m--&gt;magenta  r--&gt;red </span></span><br><span class="line"><span class="comment">#w--&gt;white  y--&gt;yellow</span></span><br><span class="line"><span class="comment">#marker---&gt;散点形状</span></span><br><span class="line"><span class="comment">#marker='o'为圆点，marker='x'为×号，marker='s'显示为小正方形</span></span><br><span class="line"><span class="comment">#alpha---&gt;散点透明度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示所画的图</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/12/15/用matplotlib包画散点图/散点图.png" alt="scatter"></p><p><strong>二、画散点图(二）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入必要的模块 </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line"></span><br><span class="line"><span class="comment">#产生测试数据 </span></span><br><span class="line">x = np.arange(<span class="number">1</span>,<span class="number">10</span>) </span><br><span class="line">y = x </span><br><span class="line">fig = plt.figure() </span><br><span class="line">ax1 = fig.add_subplot(<span class="number">111</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置标题 </span></span><br><span class="line">ax1.set_title(<span class="string">'Scatter Plot'</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置X轴标签 </span></span><br><span class="line">plt.xlabel(<span class="string">'X'</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置Y轴标签 </span></span><br><span class="line">plt.ylabel(<span class="string">'Y'</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#画散点图 </span></span><br><span class="line">ax1.scatter(x,y,c = <span class="string">'r'</span>,marker = <span class="string">'o'</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置图标 </span></span><br><span class="line">plt.legend(<span class="string">'x1'</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#显示所画的图 </span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/12/15/用matplotlib包画散点图/散点图1.png" alt="scatter"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Scatter函数是一个强大的画散点图函数：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://yoursite.com/categories/TensorFlow/"/>
    
    
  </entry>
  
  <entry>
    <title>用matplotlib包画图</title>
    <link href="http://yoursite.com/2018/12/15/%E7%94%A8matplotlib%E5%8C%85%E7%94%BB%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/12/15/用matplotlib包画图/</id>
    <published>2018-12-15T03:06:50.000Z</published>
    <updated>2018-12-15T04:10:31.295Z</updated>
    
    <content type="html"><![CDATA[<p>​    最近深度学习发展非常迅猛，大有一统江湖的趋势。经过一段时间学习，发现自己对这种神奇的玄学非常感兴趣，希望能够进一步的研究。而这种研究性学科单纯地看论文比较难以明白，所以希望能够跟进大牛们写的代码深入学习。我发现很多大牛给的源码是基于python写的，于是就打算学习python。 </p><p><strong>一、Spyder的用法</strong></p><ul><li>Spyder是一个简单的集成开发环境，它模拟MATLAB的‘工作空间’的功能，可以很方便的观察和修改数组的值。</li><li>推荐您使用IPython Console，因为它比标准的Python Console的功能更多，并且建议您将它设置为默认控制台。</li><li>命名空间（在任何给定时间内在console中定义的对象集合）在IPython中可以使用%reset命令清除。输入<strong>%reset</strong>然后按下<strong>enter键</strong>，用y确认。</li><li>首先要进行工具栏设置，调出QT窗体来显示图形。</li><li>第一步：选择工具栏的<strong>Tools–&gt;Preferences</strong></li></ul><p><img src="/2018/12/15/用matplotlib包画图/设置1.png" alt="setting1"></p><ul><li>第二步：点击IPython console选项</li></ul><p><img src="/2018/12/15/用matplotlib包画图/设置2.png" alt="setting2"></p><ul><li>第三步：选择Graphics选项，在Backend选择Qt5，然后保存重启就行</li></ul><p><img src="/2018/12/15/用matplotlib包画图/设置3.png" alt="setting3"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    最近深度学习发展非常迅猛，大有一统江湖的趋势。经过一段时间学习，发现自己对这种神奇的玄学非常感兴趣，希望能够进一步的研究。而这种研究性学科单纯地看论文比较难以明白，所以希望能够跟进大牛们写的代码深入学习。我发现很多大牛给的源码是基于python写的，于是就打算学习
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://yoursite.com/categories/TensorFlow/"/>
    
    
  </entry>
  
  <entry>
    <title>TensorFlow入门demo</title>
    <link href="http://yoursite.com/2018/12/15/TensorFlow%E5%85%A5%E9%97%A8demo/"/>
    <id>http://yoursite.com/2018/12/15/TensorFlow入门demo/</id>
    <published>2018-12-15T03:01:13.000Z</published>
    <updated>2018-12-15T03:05:15.923Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#引入tensorflow模块</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment">#创建两个常量节点</span></span><br><span class="line">node1=tf.constant(<span class="number">3.2</span>)</span><br><span class="line">node2=tf.constant(<span class="number">4.8</span>)</span><br><span class="line"><span class="comment">#创建一个adder节点，，对上面节点执行+操作</span></span><br><span class="line">adder = node1 + node2</span><br><span class="line"><span class="comment">#打印一些节点</span></span><br><span class="line">print(adder)</span><br><span class="line"><span class="comment">#打印adder运行后的结果</span></span><br><span class="line">sess=tf.Session()</span><br><span class="line">print(sess.run(adder))</span><br><span class="line"><span class="comment">#创建两个占位Tensor节点</span></span><br><span class="line">a=tf.placeholder(tf.float32)</span><br><span class="line">b=tf.placeholder(tf.float32)</span><br><span class="line"><span class="comment">#创建一个adder节点，对上面两个节点执行+操作</span></span><br><span class="line">adder_node=a+b</span><br><span class="line"><span class="comment">#打印三个节点</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(adder_node)</span><br><span class="line"><span class="comment">#运行一下，后面的dict参数是为占位tensor提供输入数据</span></span><br><span class="line">sess=tf.Session()</span><br><span class="line">print(sess.run(adder_node,&#123;a:<span class="number">3</span>,b:<span class="number">4.5</span>&#125;))</span><br><span class="line">print(sess.run(adder_node,&#123;a:[<span class="number">1</span>,<span class="number">3</span>],b:[<span class="number">2</span>,<span class="number">4</span>]&#125;))</span><br><span class="line"><span class="comment">#添加乘法操作</span></span><br><span class="line">add_and_triple=adder*<span class="number">3.</span></span><br><span class="line">print(sess.run(add_and_triple,&#123;a:<span class="number">3</span>,b:<span class="number">4.5</span>&#125;))</span><br><span class="line"><span class="comment">#创建变量w和b节点，并设置初始值</span></span><br><span class="line">w=tf.Variable([<span class="number">.1</span>],dtype=tf.float32)</span><br><span class="line">b=tf.Variable([<span class="number">-.1</span>],dtype=tf.float32)</span><br><span class="line"><span class="comment">#创建x节点，用来输入实验中的输入数据</span></span><br><span class="line">x=tf.placeholder(tf.float32)</span><br><span class="line"><span class="comment">#创建线性模型</span></span><br><span class="line">linear_model=w*x+b</span><br><span class="line"><span class="comment">#创建y节点，用来输入实验中得到的的输出数据，用于损失模型计算</span></span><br><span class="line">y=tf.placeholder(tf.float32)</span><br><span class="line"><span class="comment">#创建损失模型</span></span><br><span class="line">loss=tf.reduce_sum(tf.square(linear_model-y))</span><br><span class="line"><span class="comment">#创建Session用来计算模型</span></span><br><span class="line">sess=tf.Session()</span><br><span class="line">print(sess.run(w))</span><br><span class="line"><span class="comment">#提示打印w的值未初始化的异常</span></span><br><span class="line"><span class="comment">#变量tensor需要经过下面的init过程后才能使用：</span></span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/ZWiblltaIVJovgZzuRcHtAr2ayByn49XHfs3ks3I7Sn8bT02lzUCGVw5Xt7S3lwxEpI1s2NPPDrzteic6snlD7gw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#初始化变量</span></span><br><span class="line"><span class="comment">#再打印w的值，就可以看到之前赋的初始值</span></span><br><span class="line">init=tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br><span class="line">print(sess.run(w))</span><br><span class="line"><span class="comment">#变量初始化完之后，可以先对上面的w和b设置的初始值0.1和-0.1</span></span><br><span class="line"><span class="comment">#运行一下我们的线性模型看看结果：</span></span><br><span class="line">print(sess.run(linear_model,&#123;x:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>]&#125;))</span><br><span class="line"><span class="comment">#貌似与我们实验的实际输出差距很大，我们在运行一下损失模型</span></span><br><span class="line">print(sess.run(loss,&#123;x:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>],y:[<span class="number">4.8</span>,<span class="number">8.5</span>,<span class="number">10.4</span>,<span class="number">21</span>,<span class="number">25.3</span>]&#125;))</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/ZWiblltaIVJovgZzuRcHtAr2ayByn49XHIntb3PxX7uFbEZc5XdxlR5PTfVkPEscKGXUPib7e9ZsnTXKRfFObTDg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://yoursite.com/categories/TensorFlow/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows10环境下的安装Python+TensorFlow</title>
    <link href="http://yoursite.com/2018/12/15/Windows10%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85Python-TensorFlow/"/>
    <id>http://yoursite.com/2018/12/15/Windows10环境下的安装Python-TensorFlow/</id>
    <published>2018-12-15T02:55:16.000Z</published>
    <updated>2018-12-15T04:20:08.652Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Windows10环境下的安装python+tensorflow</strong></p><p>使用Anoconda简单安装CPU版tensorflow的方法，此方法能够一键安装常用<br>机器学习所需的科学计算包，免去了手动配置python环境变量的过程。<br>安装环境：</p><ul><li>Windows10 64位</li><li>Python 3.5.2</li><li>Anocoda3 4.2.0</li><li>tensorflow 0.1.2<br><strong>1、tensorflow</strong><br>谷歌发布的开源框架，设计到自然语言处理NLP<br>机器翻译，图像描述，图像分类等一些列技术<br>tensorflow为我们封装了大量机器学习，神经网络的函数，帮助我们搞笑的解决问题<br><strong>2、Anoconda</strong><br>Anoconda可以看做是Python的一个集成安装环境。<br>安装它就默认安装了python，IPython，集成开发环境Spyder和众多的包和模块<br>非常方便。而且Anaconda会为我们安装<strong>pip</strong>（强大的包管理程序）<br>我们可以在Windows的命令行中使用pip直接安装我们需要的包<br><strong>3、下载Anaconda</strong><br>官网的最新版Anaconda-4.4.0继承了python-3.6<br>但是tensorflow仍然不能支持3.6，因为我们安装集成python-3.5的Anaconda3-4.2.0<br>Anaconda下载地址：<a href="https://mirrors.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="noopener">Anaconda</a></li></ul><p>安装过后可以再命令行，输入conda list来查看Anaconda为我们集成的环境。<br>ps:快捷点Win+R,然后输入cmd，然后输入conda list来查看Anaconda为我们集成的环境。</p><p><img src="/2018/12/15/Windows10环境下的安装Python-TensorFlow/anoconda.jpg" alt="anaconda list"></p><p>环境里包含：<br>numpy(一个python的科学计算包，高效存储和处理大型矩阵)<br>pandas(包含了大量库和一些标准的数据模型，提供高效的操作大型数据集所需要的工具)<br>pip(简单好用的包管理工具)</p><p><strong>4、安装TensorFlow</strong></p><ul><li>使用pip自动安装TensorFlow</li></ul><p>​        pip install tensorflow</p><ul><li>当遇到提示更新pip版本的时候，先进行pip更新到最新版本</li></ul><p>​        python -m pip install –upgrade pip</p><ul><li>安装的时候尽量使用管理员身份来打开命令行窗口（ps:Win10系统点击左下角Win图标右键，选择管理员身份就行）</li><li>安装TensorFlow</li></ul><p>​        pip install tensorflow</p><ul><li>测试是否安装成功</li></ul><p>​        输入python进入python环境</p><p>​        输入import tensorflow,若没有红字报错，表示环境配置成功</p><p><img src="/2018/12/15/Windows10环境下的安装Python-TensorFlow/tensorflow.jpg" alt="tensorflow"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Windows10环境下的安装python+tensorflow&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用Anoconda简单安装CPU版tensorflow的方法，此方法能够一键安装常用&lt;br&gt;机器学习所需的科学计算包，免去了手动配置python环境变量的过程
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://yoursite.com/categories/TensorFlow/"/>
    
    
  </entry>
  
  <entry>
    <title>异步与多线程</title>
    <link href="http://yoursite.com/2018/12/15/%E5%BC%82%E6%AD%A5%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/12/15/异步与多线程/</id>
    <published>2018-12-15T02:51:30.000Z</published>
    <updated>2018-12-15T02:52:51.072Z</updated>
    
    <content type="html"><![CDATA[<p>其实异步是目的，多线程是实现这个目的方法。</p><ul><li>异步：A发起一个操作后，可以继续自顾自的处理它自己的事儿，不用干等着这个耗时操作返回</li><li>随着拥有多线程CPU,多核的普及，多线程和异步操作等并发程序设计方法也受到更多</li></ul><p><strong>1、多线程和异步操作的异同</strong></p><ul><li>多线程和异步操作两者都可以达到避免调用线程阻塞的目的，从而提高软件的可响应性。</li><li>甚至有些时候我们认为多线程和异步操作是等同的。但是多线程和异步操作还是有一些区别</li></ul><p><strong>2、异步操作的本质：</strong></p><ul><li>所有的程序最终都会由计算机硬件来执行。所以为了更好的理解异步操作的本质，网卡，声卡，显卡都是有DMA功能的DMA就是<strong>直接内存访问</strong>的意思（Driect Memory Access）</li><li>也就是说，拥有DMA功能的硬件在和内存进行数据交换的时候可以不消耗CPU资源</li><li>只要CPU在发起数据传输时发送一个指令，硬件就开始自己和内存交换数据在传输完成后硬件会触发一个中断来通知操作完成这些无需消耗CPU时间的I/O操作正是异步操作的硬件基础。</li><li>所以即使在DOS这样的单进程（无线程概念）系统中也同样可以发起异步的DMA操作</li></ul><p><strong>3、线程的本质</strong></p><ul><li>线程不是一个计算机硬件的功能，而是操作系统提供的一种逻辑功能</li><li>线程本质上是<strong>进程中一段并发运行的代码</strong>，所以线程需要操作系统投入CPU资源来运行和调度</li></ul><p><strong>4、异步操作的特点</strong></p><ul><li>因为异步操作 不需要额外的线程负担，并且使用<strong>回调的方式</strong>进行处理在设计良好的情况下，处理函数可以不必使用共享变量，即使无法完全不用，最起码也可以减少共享变量的数量。减少了死锁的可能。</li><li>当然异步操作也并非完美无瑕。编写异步操作的复杂程度较高，程序主要使用回调方式进行处理与普通人的思维方式有些初入，而且难以调试。</li></ul><p><strong>5、多线程的优缺点</strong></p><ul><li>线程中的护理程序依然是顺序执行，符合普通人的思维习惯。所以编程简单但是多线程的缺点也明显</li><li>线程的滥用会给系统带来上下文切换的额外负担并且线程间的共享变量可能造成死锁的出现。</li><li>当需要执行I/O操作的时候，使用异步操作比使用线程+同步I/O操作更合还是I/O操作不仅包括了直接的文件，网络的读写，还包括数据库操作，WebService，HttpRequest等跨进程的调用</li><li>线程的适用范围是需要长时间CPU运算的场合比如耗时较长图形处理和算法执行，但是往往由于线程编程的简单和符合习惯，所以很多朋友往往适用线程来执行耗时较长的IO操作，这样在之后又少数几个并发操作的时候还行，需要处理大量的并发操作就不合适了，因为要不停的上下文切换</li></ul><p><strong>6、异步调用</strong></p><ul><li>异步调用并不是要减少线程的开销，目的是让调用方法的主线程不需要同步等待这个函数</li><li>调用上，从而可以让主线程继续执行他下面的代码，同时系统会从ThreadPool线程池中取一个线程来执行，帮助我们将我们要写/读的数据发送到网卡，由于不需要我们等待，我们等于同时做了两件事情</li></ul><p><strong>7、线程池的实现方法</strong></p><ul><li>线程池的实现方法与线程不一样的，初始化时候，在线程池的线程为0，当进程需要一个线程的时候，创建一个线程由此线程执行用户的方法，这个线程执行完后并不立即销毁，而是挂起等待，如果有其他方法需要</li><li>执行，则唤醒进行处理 ，只有当它等待到40秒还没有任务执行的时候才唤醒自己，并销毁自己</li><li>当然如果线程池中的线程不够处理任务的时候，会再次创建一个新的线程来执行。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实异步是目的，多线程是实现这个目的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;异步：A发起一个操作后，可以继续自顾自的处理它自己的事儿，不用干等着这个耗时操作返回&lt;/li&gt;
&lt;li&gt;随着拥有多线程CPU,多核的普及，多线程和异步操作等并发程序设计方法也受到更多&lt;/li&gt;
&lt;/ul&gt;
      
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
  </entry>
  
  <entry>
    <title>同步与异步</title>
    <link href="http://yoursite.com/2018/12/15/%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5/"/>
    <id>http://yoursite.com/2018/12/15/同步与异步/</id>
    <published>2018-12-15T02:50:05.000Z</published>
    <updated>2018-12-15T02:50:59.235Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1、同步交互</strong>：发送一个请求，需要等待返回，然后才能够发送下一个请求，有个等待过程</p><p><strong>2、异步交互</strong>：发送一个请求，不需要等待返回，随时可以再发送下一个请求，也就是不需要等待</p><ul><li>区别：一个需要等待，一个不需要等待，再部分情况下，我们的项目开发中都会优先选择不需要等待的异步交互方式。</li><li>同步：用来确保资源一次只能被一个县城使用的过程。同步对于单线程程序没有任何好处。</li></ul><p>使用同步比非同步的性能差三到四倍</p><p>线程都是独立的，而且异步执行，也就是说每个线程都包含了运行时所需要的数据或者方法</p><p>而不需要外部的资源或者方法，也不必关心其他线程的状态或者行为。</p><p>但是经常有些同时运行的线程需要共享数据，此时就需要考虑其他线程的状态和行为。</p><p>否则就不能保证程序的运行结果的正确性</p><p>需要做的是允许一个线程彻底完成他的任务后，在允许执行下一个线程执行。必须保证一个共享的</p><p>资源一次只能被一个线程使用，实现的目的过程叫做同步。</p><ul><li>比如广播就是一个异步的例子。发起者不关心接受者的状态，不需要等待接受者的返回信息</li><li>比如电话就是一个同步的例子，发起者需要等待接收者，接通电话后，通信才能开始，需要等待接收者的返回信息。</li></ul><p><strong>同步和异步的区别：</strong></p><p>在进行网络编程的时候，我们会看到同步，异步，阻塞，非阻塞4种调用方式以及他们的组合</p><p>其中同步方式，异步方式主要是由客户端client控制的</p><p><strong>同步sync：</strong></p><p>就是发起一个功能调用的时候，在没有得到结果之前，该调用就不返回或者继续执行后续操作</p><p>Java中所有方法都是同步调用，因为必须要等待结果后才能继续执行</p><p>我们说的同步，异步的时候，一般而言是指那些需要其他端写作或者需要一定时间完成的任务</p><p>简单而言：同步就是必须一件一件事做，等前一件做完了后才能做下一件事</p><p>B/S模式的表单提交：客户端提交请求–》等待服务器处理–》处理完毕返回</p><p>在这个过程中客户端（浏览器）不能做其他事情</p><p><strong>异步（Async）</strong></p><p>异步与同步相反，当一个异步过程调用发出后，调用者在没有得到结果之前，就可以继续执行后续操作</p><p>当这个调用完成后，一般通过状态，通知和回调来通知调用者。</p><p>对于异步调用，调用的返回并不受调用者控制</p><p>对于通知调用者的三种方式：</p><ul><li>状态：监听被调用者的状态（轮询），调用者需要每隔一定时间检查一次，效率会很低</li><li>通知：当被调用者执行完成后，发出通知告知调用者，不需要消耗太多性能</li><li>回调：与通知类似，当被调用者执行完成后，会调用调用者提供的回调函数</li></ul><p>B/S模式的ajax的请求，具体过程：客户端发出ajax请求–》服务端处理–》处理完毕执行客户端回调</p><p>在客户端（浏览器）发出请求后，仍然可以做其他的事情</p><p>同步与异步的区别：请求发出后，是否需要等待结果，才能继续执行其他操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;1、同步交互&lt;/strong&gt;：发送一个请求，需要等待返回，然后才能够发送下一个请求，有个等待过程&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、异步交互&lt;/strong&gt;：发送一个请求，不需要等待返回，随时可以再发送下一个请求，也就是不需要等待&lt;/p&gt;
&lt;ul&gt;
&lt;l
      
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://yoursite.com/2018/12/15/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/12/15/单例模式/</id>
    <published>2018-12-15T02:39:05.000Z</published>
    <updated>2018-12-15T02:41:37.117Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式要求一个类只能有一个实例，并且提供了一个全局的访问点。</p><p>比如说，中国主席的职位是Singleton，法律规定主席选举，任何时间只能有一个主席。</p><h3 id="1、逻辑模型图："><a href="#1、逻辑模型图：" class="headerlink" title="1、逻辑模型图："></a>1、逻辑模型图：</h3><p><img src="https://images2018.cnblogs.com/blog/811614/201803/811614-20180315144708730-499694311.png" alt="img"></p><h3 id="2、物理模型图："><a href="#2、物理模型图：" class="headerlink" title="2、物理模型图："></a>2、物理模型图：</h3><p><img src="https://images2018.cnblogs.com/blog/811614/201803/811614-20180315145332295-339822939.png" alt="img"></p><h3 id="3、具体实现："><a href="#3、具体实现：" class="headerlink" title="3、具体实现："></a>3、具体实现：</h3><h4 id="3-1、懒汉式单例："><a href="#3-1、懒汉式单例：" class="headerlink" title="3.1、懒汉式单例："></a>3.1、懒汉式单例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//懒汉式单例</span><br><span class="line">public sealed class Singleton//类设置属性为密封，不能被继承。</span><br><span class="line">&#123;</span><br><span class="line">    static Singleton instance=null;</span><br><span class="line">    Singleton()</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    public static Singleton Instance</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            if(instance==null)</span><br><span class="line">            &#123;</span><br><span class="line">                instance=new Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">            return instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//这种实现方式，不是线程安全的，因为多线程的时候，可能会得到Singleton类的多个实例。</span><br><span class="line">//假如有两个线程都去判断if(instance==null)并且得到结果为true，这时两个线程</span><br><span class="line">//都会创建类Singleton的实例，违背了单例模式只能有一个类对象的实例的原则。</span><br></pre></td></tr></table></figure><h4 id="3-2、线程安全的单例"><a href="#3-2、线程安全的单例" class="headerlink" title="3.2、线程安全的单例"></a>3.2、线程安全的单例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public sealed class Singleton</span><br><span class="line">&#123;</span><br><span class="line">    static Singleton instance=null;</span><br><span class="line">    static readonly object padlock=new object();//进程辅助对象</span><br><span class="line">    </span><br><span class="line">    Singleton()</span><br><span class="line">    &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static Singleton Instance</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            lock(padlock)</span><br><span class="line">            &#123;</span><br><span class="line">                if(instance==null)</span><br><span class="line">                &#123;</span><br><span class="line">                    instance=new Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">                return instance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//对于线程来说是安全的，首先创建了一个进程的辅助对象，线程进入时先对padlock加锁</span><br><span class="line">//然后在检测对象是否被创建，这样可以确保只有一个实例被创建，而且加入了锁，导致程序只有</span><br><span class="line">//一个线程可以进去，对象实例有最先进入的那个线程创建，后面进来的线程进入时if(instance==null)为false</span><br><span class="line">//不会再去创建对象实例，这种方式增加了额外的开销，损失了性能。</span><br></pre></td></tr></table></figure><h4 id="3-3、双重锁定"><a href="#3-3、双重锁定" class="headerlink" title="3.3、双重锁定"></a>3.3、双重锁定</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public sealed class Singleton</span><br><span class="line">&#123;</span><br><span class="line">    static Singleton instance=null;</span><br><span class="line">    static readonly object padlock=new object();</span><br><span class="line">    </span><br><span class="line">    Singleton()</span><br><span class="line">    &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static Singleton Instance</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            if(instance==null)</span><br><span class="line">            &#123;</span><br><span class="line">                lock(padlock)</span><br><span class="line">                &#123;</span><br><span class="line">                    if(instance==null)</span><br><span class="line">                    &#123;</span><br><span class="line">                        instance=new Singleton();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//对于多线程是安全的，而且并不是线程每次都加锁，只有判断对象实例没有被创建的时候才会加锁</span><br><span class="line">//加锁还再进行对象是否被创建的判断。解决了线程并发的问题，但是实际上需要这样实现，大多数我们会</span><br><span class="line">//使用静态初始化，但是静态初始化有自己的缺点，无法实现延迟初始化</span><br></pre></td></tr></table></figure><h4 id="3-4、静态初始化"><a href="#3-4、静态初始化" class="headerlink" title="3.4、静态初始化"></a>3.4、静态初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public sealed class Singleton</span><br><span class="line">&#123;</span><br><span class="line">    static readonly Singleton instance=new Singleton();</span><br><span class="line">    //静态初始化的无参构造方法</span><br><span class="line">    static Singleton()</span><br><span class="line">    &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Singleton()</span><br><span class="line">    &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static Singleton Instance</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            return instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//类标记为sealed不能继承，因为继承可能会增加实例。</span><br><span class="line">//变量标记为readonly，表示只能在静态初始化时候或者在构造方法中分配变量。</span><br></pre></td></tr></table></figure><h4 id="3-5、延迟初始化"><a href="#3-5、延迟初始化" class="headerlink" title="3.5、延迟初始化"></a>3.5、延迟初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//如果类，结构，代理，枚举是外置，那么修饰符只有public和internal，默认是internal</span><br><span class="line">//如果是内置的，修饰符默认是private</span><br><span class="line">//举例： class A&#123;&#125;//类A是internal，internal表示同一个程序集中所有代码都可以访问类型或者成员</span><br><span class="line">//其他程序集不可以访问。</span><br><span class="line">//举例：class A</span><br><span class="line">//            &#123;</span><br><span class="line">//                class B&#123;&#125;//类B是private</span><br><span class="line">//            &#125;</span><br><span class="line">public sealed class Singleton</span><br><span class="line">&#123;</span><br><span class="line">    Singleton()//类的构造函数默认为private</span><br><span class="line">    &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static Singleton Instance</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            return Lazy.instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    class Lazy//lazy默认是internal</span><br><span class="line">    &#123;</span><br><span class="line">        static Lazy()</span><br><span class="line">        &#123;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        internal static readonly Singleton instance=new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">//初始化的时候有一个Lazy类的一个静态成员来完成，这样实现了延迟初始化。</span><br></pre></td></tr></table></figure><h3 id="4、实现总结："><a href="#4、实现总结：" class="headerlink" title="4、实现总结："></a>4、实现总结：</h3><p>Singleton单例模式构造方法可以设置为protected，允许子类继承。</p><p>单例模式不要支持实例化，可能导致多个对象实例，也不要支持Icloneable接口，导致多个对象的实例，单例模式只考虑了对象创建的管理，没有考虑对象销毁的管理，支持垃圾回收的平台的对象的开销来讲，没必要对其销毁进行特殊的管理。</p><p>理解：Singleton模式核心：如何控制用户使用new对一个类的构造方法任意调用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;单例模式要求一个类只能有一个实例，并且提供了一个全局的访问点。&lt;/p&gt;
&lt;p&gt;比如说，中国主席的职位是Singleton，法律规定主席选举，任何时间只能有一个主席。&lt;/p&gt;
&lt;h3 id=&quot;1、逻辑模型图：&quot;&gt;&lt;a href=&quot;#1、逻辑模型图：&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA中的流(续)</title>
    <link href="http://yoursite.com/2018/12/14/JAVA%E4%B8%AD%E7%9A%84%E6%B5%81-%E7%BB%AD/"/>
    <id>http://yoursite.com/2018/12/14/JAVA中的流-续/</id>
    <published>2018-12-14T14:07:45.000Z</published>
    <updated>2018-12-14T14:11:45.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、流（Stream）"><a href="#一、流（Stream）" class="headerlink" title="一、流（Stream）"></a>一、流（Stream）</h1><h4 id="所谓流-Stream-，就是一系列的数据。"><a href="#所谓流-Stream-，就是一系列的数据。" class="headerlink" title="所谓流(Stream)，就是一系列的数据。"></a>所谓流(Stream)，就是一系列的数据。</h4><h4 id="当不同的介质之间有数据交互的时候，java就会使用流来实现。"><a href="#当不同的介质之间有数据交互的时候，java就会使用流来实现。" class="headerlink" title="当不同的介质之间有数据交互的时候，java就会使用流来实现。"></a>当不同的介质之间有数据交互的时候，java就会使用流来实现。</h4><h4 id="数据源可以使文件，还可以是数据库，网络，甚至是其他的程序"><a href="#数据源可以使文件，还可以是数据库，网络，甚至是其他的程序" class="headerlink" title="数据源可以使文件，还可以是数据库，网络，甚至是其他的程序"></a>数据源可以使文件，还可以是数据库，网络，甚至是其他的程序</h4><h4 id="不如读取文件的数据到程序中，站在程序的角度来看，就叫做输入流"><a href="#不如读取文件的数据到程序中，站在程序的角度来看，就叫做输入流" class="headerlink" title="不如读取文件的数据到程序中，站在程序的角度来看，就叫做输入流"></a>不如读取文件的数据到程序中，站在程序的角度来看，就叫做输入流</h4><ul><li><p>字节输入流：InputStream</p></li><li><p>字符输入流：Reader　　　　</p></li><li>缓存字符输入流：BufferedReader　　</li><li><p>数据输入流  ：DataInputStream               </p></li><li><p>字节输出流：OutputStream　　　　　　　　</p></li><li>字符输出流：Writer　　　　</li><li>缓存字符输出流：PrintWriter　　　　</li><li>数据输出流：DataOutputStream　</li></ul><p><img src="https://images2018.cnblogs.com/blog/811614/201802/811614-20180227120014277-347291744.png" alt="img"></p><h3 id="1、文件输入流"><a href="#1、文件输入流" class="headerlink" title="1、文件输入流"></a>1、文件输入流</h3><p>可以用来把数据从硬盘的文件，读取到JVM(内存)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">                File f=<span class="keyword">new</span> File(<span class="string">"d:/lol.txt"</span>);</span><br><span class="line">                <span class="comment">//创建基于文件的输入流</span></span><br><span class="line">                FileInputStream fis=<span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">                <span class="comment">//通过这个输入流，就可以把数据从硬盘，读取到java的虚拟机中，也就是读取到内存中</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、字节流"><a href="#2、字节流" class="headerlink" title="2、字节流"></a>2、字节流</h3><ul><li><p>InputStream：字节输入流</p></li><li><p>用以字节的形式读取和写入数据</p></li><li><p>InputStream是字节输入流，同时也是抽象类，只提供方法声明，不提供方法的具体实现。</p></li><li><p>FileInputStream是InputStream的子类，可以进行直接使用</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">                File f=<span class="keyword">new</span> File(<span class="string">"d:/lol.txt"</span>);</span><br><span class="line">                <span class="comment">//创建基于文件的输入流</span></span><br><span class="line">                FileInputStream fis=<span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">                <span class="comment">//通过这个输入流，就可以把数据从硬盘，读取到java的虚拟机中，也就是读取到内存中</span></span><br><span class="line">                <span class="comment">//创建字节数组，其长度就是文件的长度</span></span><br><span class="line">                <span class="keyword">byte</span>[] all=<span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>)f.length()];</span><br><span class="line">                <span class="comment">//以字节流的形式读取文件所有内容</span></span><br><span class="line">                fis.read(all);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">byte</span> b:all)&#123;</span><br><span class="line">                    System.out.println(b);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//每次使用完流，都应该进行关闭</span></span><br><span class="line">                fis.close()</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>OutputStream：字节输出流，同事也是抽象类，只提供方法声明，不提供方法的具体实现。</p></li><li><p>FileOutputStream是OutputStream子类，可以进行直接使用</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">                File f=<span class="keyword">new</span> File(<span class="string">"d:/lol.txt"</span>);</span><br><span class="line">                <span class="keyword">byte</span> data[]=&#123;<span class="number">88</span>,<span class="number">89</span>&#125;;</span><br><span class="line">                <span class="comment">//创建基于文件的输出流</span></span><br><span class="line">                FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(f);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//把数据写入到输出流上</span></span><br><span class="line">                fos.write(data);</span><br><span class="line">                <span class="comment">//每次使用完流，都应该进行关闭</span></span><br><span class="line">                fos.close()</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：所有的流，不论是输入流还是输出流，使用完毕之后，都应该关闭，如果不关闭，会产生对资源占用的浪费，当量比较大时，会影响业务的正常开展。</p><p>3.流的关闭方式</p><h4 id="在finally中关闭："><a href="#在finally中关闭：" class="headerlink" title="在finally中关闭："></a>在finally中关闭：</h4><ul><li><p>首先把流的引用声明在try的外面，如果声明在try里面，其作用与无法抵达finally</p></li><li><p>在finally关闭之前，要先判断该引用是否为空</p></li><li><p>关闭的时候，要再一次的进行try。。catch处理</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        File f=<span class="keyword">new</span> File(<span class="string">"d/source/LOL.exe"</span>);</span><br><span class="line">        FileInputStream fis=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">                fis=<span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">                <span class="keyword">byte</span>[] all=<span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>)f.length()];</span><br><span class="line">                fis.read(all);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">byte</span> b:all)&#123;</span><br><span class="line">                    System.out.println(b);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//在finally里关闭流</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">null</span>!=fis)</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        fis.close();</span><br><span class="line">                    &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                         e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用try-方式"><a href="#使用try-方式" class="headerlink" title="使用try()方式"></a>使用try()方式</h4><ul><li><p>把流定义在try（）里，try，catch或者finally结束的时候，会自动关闭</p></li><li><p>这种编写代码的方式叫做try-with-resources，这是JDK7开始支持的技术</p></li><li><p>所有的流，都实现了一个接口叫做AutoCloseable，任何类实现了这个接口，都可以在try()中进行实例化，并且在try，catch，finally结束的时候自动关闭，回收相关资源。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        File f=<span class="keyword">new</span> File(<span class="string">"d/source/LOL.exe"</span>);</span><br><span class="line">        <span class="comment">//把流定义在try()里，try，catch或者finally结束的时候，会自动关闭</span></span><br><span class="line">        <span class="keyword">try</span>(FileInputStream fis=<span class="keyword">new</span> FileInputStream(f))&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] all=<span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>)f.length()];</span><br><span class="line">            fis.read(all);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">byte</span> b:all)&#123;</span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、流（Stream）&quot;&gt;&lt;a href=&quot;#一、流（Stream）&quot; class=&quot;headerlink&quot; title=&quot;一、流（Stream）&quot;&gt;&lt;/a&gt;一、流（Stream）&lt;/h1&gt;&lt;h4 id=&quot;所谓流-Stream-，就是一系列的数据。&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA中的流</title>
    <link href="http://yoursite.com/2018/12/14/JAVA%E4%B8%AD%E7%9A%84%E6%B5%81/"/>
    <id>http://yoursite.com/2018/12/14/JAVA中的流/</id>
    <published>2018-12-14T14:03:20.000Z</published>
    <updated>2018-12-14T14:06:55.575Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、缓存流"><a href="#一、缓存流" class="headerlink" title="一、缓存流"></a>一、缓存流</h2><p>　　以介质是硬盘为例子说明，字节流和字符流的缺点：</p><ul><li><p>每次读写的时候，都会访问硬盘，如果读写频率比较高的时候，性能不佳。为了解决问题，采用缓存流。</p></li><li><p>缓存流在读取的时候，会一次性读较多的数据到缓存中，以后每一次的读取，都是在缓存中访问，直到缓存中的数据读取完毕，再到硬盘中区读取。</p></li><li><p>缓存流在写入数据的时候，会先把数据写入到缓存区，直到缓存区达到一定的量，才把这些数据，一起写入到硬盘中去，按照这种方式，就不会像字节流，字符流那样每次写一个字节都访问硬盘，减少了I/O操作。</p></li></ul><h3 id="1、使用缓存流读取数据"><a href="#1、使用缓存流读取数据" class="headerlink" title="1、使用缓存流读取数据"></a>1、使用缓存流读取数据</h3><p>BufferedReader缓存字符输入流，可以一次读取一行数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        File f=<span class="keyword">new</span> File(<span class="string">"d/source/LOL.exe"</span>);</span><br><span class="line">        <span class="keyword">try</span>(FileReader fr=<span class="keyword">new</span> FileReader(f);BufferedReader br=<span class="keyword">new</span> BufferedReader(fr);)&#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                        String line=br.readLine();<span class="comment">//一次读一行。</span></span><br><span class="line">                        <span class="keyword">if</span>(line==<span class="keyword">null</span>)<span class="keyword">break</span>;</span><br><span class="line">                        System.out.println(line);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、使用缓存流写入数据"><a href="#2、使用缓存流写入数据" class="headerlink" title="2、使用缓存流写入数据"></a>2、使用缓存流写入数据</h3><p>PrintWriter缓存字符输出流，可以一次写出一行数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        File f=<span class="keyword">new</span> File(<span class="string">"d/source/LOL.exe"</span>);</span><br><span class="line">        <span class="keyword">try</span>(FileWriter fw=<span class="keyword">new</span> FileWriter(f);PrintWriter pw=<span class="keyword">new</span> PrintWriter(fw);)&#123;</span><br><span class="line">                &#123;</span><br><span class="line">                        pw.println(<span class="string">"hello world"</span>);</span><br><span class="line">                        pw.println(<span class="string">"hello kitty"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、使用flush"><a href="#3、使用flush" class="headerlink" title="3、使用flush"></a>3、使用flush</h3><p>有时候，需要立即把数据写入到硬盘，而不是等缓存满了才写进去，这时候就要用flush。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        File f=<span class="keyword">new</span> file(<span class="string">"d/source/LOL.exe"</span>);</span><br><span class="line">        <span class="comment">//创建文件字符流</span></span><br><span class="line">        <span class="comment">//缓存流必须建立在一个存在的流的基础上</span></span><br><span class="line">        <span class="keyword">try</span>(FileWriter fr=<span class="keyword">new</span> FileWriter(f);PrintWriter pw=<span class="keyword">new</span> PrintWriter(fr);)&#123;</span><br><span class="line">            <span class="comment">//向文件LOL.exe中写入三行语句。</span></span><br><span class="line">            pw.println(<span class="string">"hello world"</span>);</span><br><span class="line">            <span class="comment">//强制把缓存中的数据写入硬盘，无论缓存是否已满</span></span><br><span class="line">            pw.flush();</span><br><span class="line">            pw.println(<span class="string">"I love play lol"</span>);</span><br><span class="line">            pw.flush();</span><br><span class="line">            pw.println(<span class="string">"I love play dota"</span>);</span><br><span class="line">            pw.flush();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、数据流"><a href="#二、数据流" class="headerlink" title="二、数据流"></a>二、数据流</h2><h3 id="数据输入流：DataInputStream"><a href="#数据输入流：DataInputStream" class="headerlink" title="　　数据输入流：DataInputStream"></a>　　数据输入流：DataInputStream</h3><h3 id="数据输出流：DataOutputStream"><a href="#数据输出流：DataOutputStream" class="headerlink" title="　　数据输出流：DataOutputStream"></a>　　数据输出流：DataOutputStream</h3><p>数据流的方法：writeUTF()，readUTF()可以进行数据的格式化顺序读写</p><p>要用DataInputStream读取一个文件，这个文件必须由DataOutStream写出的，不然会抛出EOFException异常。也就是说这两个是成对出现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        write();<span class="comment">//先写入</span></span><br><span class="line">        read();<span class="comment">//在读取</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File f=<span class="keyword">new</span> File(<span class="string">"d:/source/LOL.exe"</span>);</span><br><span class="line">        <span class="keyword">try</span>(</span><br><span class="line">                FileInputStream fis=<span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">                DataInputStream dis=<span class="keyword">new</span> DataInputStream(fis);</span><br><span class="line">        )&#123;</span><br><span class="line">        <span class="comment">//然后在读取刚才写入到lol.exe文件里的东西。</span></span><br><span class="line">                <span class="keyword">boolean</span> b=dis.readBoolean();</span><br><span class="line">                <span class="keyword">int</span> i=dis.readInt();</span><br><span class="line">                String str=dis.readUTF();</span><br><span class="line">                System.out.println(<span class="string">"读取到布尔值："</span>+b);</span><br><span class="line">                System.out.println(<span class="string">"读取到整数："</span>+i);</span><br><span class="line">                System.out.println(<span class="string">"读取到字符串"</span>+str);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File f=<span class="keyword">new</span> File(<span class="string">"d:/source/LOL.exe"</span>);</span><br><span class="line">        <span class="keyword">try</span>(</span><br><span class="line">                FileOutStream fos=<span class="keyword">new</span> FileOutputStream(f);</span><br><span class="line">                DataOutStream dos=<span class="keyword">new</span> DataOutStream(fos);</span><br><span class="line">        )&#123;</span><br><span class="line">        <span class="comment">//把布尔型，整型，字符型这三个写到lol.exe文件里去</span></span><br><span class="line">            dos.writeBoolean(<span class="keyword">true</span>);</span><br><span class="line">            dos.writeInt(<span class="number">300</span>);</span><br><span class="line">            dos.writeUTF(<span class="string">"hello world"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、对象流"><a href="#三、对象流" class="headerlink" title="三、对象流"></a>三、对象流</h2><p>　　可以直接把一个对象以流的形式传输给其他的介质，比如硬盘，一个对象以流的形式进行传输，叫做序列化。</p><p>该对象所对应的类，必须是实现Serializable接口</p><p>首先序列化一个实体类Hero</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"><span class="comment">//表示这个类当前的版本，如果有了变化，比如添加了新的属性，就要修改这个版本号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID=<span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> hp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要把Hero对象直接保存在文件上，必须让Hero类实现Serializable接口</p><p>首先要创建对象输出流，也就是写入对象到流，首先创建一个文件写入流FileOutputStream对象，然后在创建一个对象写入流ObjectOutputStream对象，把文件写入流传到对象写入流中。写入操作，利用ObjectOutputStream的writeObject()方法进行写入。同样读取操作，还是要先创建文件读取流FileInputStream对象，然后在创建一个对象读取流ObjectInputStream对象，把文件读取流对象传到对象读取流中。然后执行对象读取流的readObject()方法进行读取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建一个Hero对象</span></span><br><span class="line">        <span class="comment">//然后把Hero对象直接保存在文件上，必须Hero类实现Serializable接口</span></span><br><span class="line">        Hero h=<span class="keyword">new</span> Hero();</span><br><span class="line">        h.name=<span class="string">"Teemo"</span>;</span><br><span class="line">        h.hp=<span class="number">90.0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//准备一个文件用于保存新创建的Hero对象</span></span><br><span class="line">        File f=<span class="keyword">new</span> File(<span class="string">"d:/Teemo.lol"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>(</span><br><span class="line">                <span class="comment">//创建对象输出流(也就是写入)</span></span><br><span class="line">                FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(f);</span><br><span class="line">                ObjectOutputStream oos=<span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">                <span class="comment">//创建对象输入流（也就是读取）</span></span><br><span class="line">                FileInputStream fis=<span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">                ObjectInputStream ois=<span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">        )&#123;</span><br><span class="line">                oos.writeObject(h);</span><br><span class="line">                Hero h2=(Hero)ois.readObject();</span><br><span class="line">                System.out.println(h2.name);</span><br><span class="line">                System.out.println(h2.hp);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、控制台的输入输出"><a href="#四、控制台的输入输出" class="headerlink" title="四、控制台的输入输出"></a>四、控制台的输入输出</h2><ul><li><p>控制台输出数据：System.out</p></li><li><p>控制台输入数据：System.in</p></li></ul><p>利用System.in进行控制台写入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line">publc <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//控制台输入</span></span><br><span class="line">        <span class="keyword">try</span>(InputStream is=System.in;)&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> i=is.read();</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用Scanner进行逐行读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> class <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//使用Scanner进行逐行读取。</span></span><br><span class="line">        Scanner s=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            String strLine=s.nextLine();</span><br><span class="line">            System.out.pirntln(strLine);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、缓存流&quot;&gt;&lt;a href=&quot;#一、缓存流&quot; class=&quot;headerlink&quot; title=&quot;一、缓存流&quot;&gt;&lt;/a&gt;一、缓存流&lt;/h2&gt;&lt;p&gt;　　以介质是硬盘为例子说明，字节流和字符流的缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每次读写的时候，都会访问硬盘，如
      
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA中的集合类</title>
    <link href="http://yoursite.com/2018/12/14/JAVA%E4%B8%AD%E7%9A%84%E9%9B%86%E5%90%88%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/12/14/JAVA中的集合类/</id>
    <published>2018-12-14T13:58:09.000Z</published>
    <updated>2018-12-14T14:01:54.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、ArrayList"><a href="#一、ArrayList" class="headerlink" title="一、ArrayList"></a>一、ArrayList</h2><p>　　解决了数组的局限性，最常见的容器类，ArrayList容器的容量capacity会随着对象的增加，自动增长。不会出现数组边界的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//容器类ArrayList，用于存放对象</span></span><br><span class="line">        ArrayList heros = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        heros.add( <span class="keyword">new</span> Hero(<span class="string">"盖伦"</span>));</span><br><span class="line">        System.out.println(heros.size());</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//容器的容量"capacity"会随着对象的增加，自动增长</span></span><br><span class="line">        <span class="comment">//只需要不断往容器里增加英雄即可，不用担心会出现数组的边界问题。</span></span><br><span class="line">        heros.add( <span class="keyword">new</span> Hero(<span class="string">"提莫"</span>));</span><br><span class="line">        System.out.println(heros.size());</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、ArrayList常用方法"><a href="#二、ArrayList常用方法" class="headerlink" title="二、ArrayList常用方法"></a>二、ArrayList常用方法</h2><p>首先创建一个重写了toString的Hero类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> hp;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> damage;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 增加一个初始化name的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 重写toString方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1、add增加"><a href="#1、add增加" class="headerlink" title="1、add增加"></a>1、add增加</h3><ul><li>1、直接add对象 hero.add(new Hero(“demo”)); </li><li>2、指定位置增加对象hero.add(3,”demo”)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList heros = <span class="keyword">new</span> ArrayList();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 把5个对象加入到ArrayList中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.add(<span class="keyword">new</span> Hero(<span class="string">"hero "</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(heros);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 在指定位置增加对象</span></span><br><span class="line">        Hero specialHero = <span class="keyword">new</span> Hero(<span class="string">"special hero"</span>);</span><br><span class="line">        heros.add(<span class="number">3</span>, specialHero);</span><br><span class="line"> </span><br><span class="line">        System.out.println(heros.toString());</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、contains-：判断是否存在"><a href="#2、contains-：判断是否存在" class="headerlink" title="2、contains()：判断是否存在"></a>2、contains()：判断是否存在</h3><h3 id="3、get-获取指定位置的对象"><a href="#3、get-获取指定位置的对象" class="headerlink" title="3、get():获取指定位置的对象"></a>3、get():获取指定位置的对象</h3><h3 id="4、indexOf-获取对象所处的位置"><a href="#4、indexOf-获取对象所处的位置" class="headerlink" title="4、indexOf():获取对象所处的位置"></a>4、indexOf():获取对象所处的位置</h3><h3 id="5、remove-删除"><a href="#5、remove-删除" class="headerlink" title="5、remove():删除"></a>5、remove():删除</h3><h3 id="6、set-替换"><a href="#6、set-替换" class="headerlink" title="6、set():替换"></a>6、set():替换</h3><h3 id="7、size-获取大小"><a href="#7、size-获取大小" class="headerlink" title="7、size():获取大小"></a>7、size():获取大小</h3><h3 id="8、toArray-转换为数组"><a href="#8、toArray-转换为数组" class="headerlink" title="8、toArray():转换为数组"></a>8、toArray():转换为数组</h3><h2 id="三、ArrayList和List"><a href="#三、ArrayList和List" class="headerlink" title="三、ArrayList和List"></a>三、ArrayList和List</h2><p>ArrayList实现了接口List，常见的写法会把引用声明为接口List类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//ArrayList实现了接口List</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//常见的写法会把引用声明为接口List类型</span></span><br><span class="line">        <span class="comment">//注意：是java.util.List,而不是java.awt.List</span></span><br><span class="line">        <span class="comment">//接口引用指向子类对象（多态）</span></span><br><span class="line">         </span><br><span class="line">        List heros = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        heros.add( <span class="keyword">new</span> Hero(<span class="string">"盖伦"</span>));</span><br><span class="line">        System.out.println(heros.size());</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、ArrayList遍历的方法"><a href="#四、ArrayList遍历的方法" class="headerlink" title="四、ArrayList遍历的方法"></a>四、ArrayList遍历的方法</h2><h3 id="1、使用for循环，通过获取ArrayList的size-来一一遍历"><a href="#1、使用for循环，通过获取ArrayList的size-来一一遍历" class="headerlink" title="1、使用for循环，通过获取ArrayList的size()来一一遍历"></a>1、使用for循环，通过获取ArrayList的size()来一一遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> ArrayList&lt;Hero&gt;();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 放5个Hero进入容器</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.add(<span class="keyword">new</span> Hero(<span class="string">"hero name "</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 第一种遍历 for循环</span></span><br><span class="line">        System.out.println(<span class="string">"--------for 循环-------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; heros.size(); i++) &#123;</span><br><span class="line">            Hero h = heros.get(i);</span><br><span class="line">            System.out.println(h);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、使用迭代器Iterator进行遍历，迭代器每次都是从一个空的位置开始，通过hasNext-来判断，当返回false时表示后面没有数据了结束遍历，获取通过next-方法获取。"><a href="#2、使用迭代器Iterator进行遍历，迭代器每次都是从一个空的位置开始，通过hasNext-来判断，当返回false时表示后面没有数据了结束遍历，获取通过next-方法获取。" class="headerlink" title="2、使用迭代器Iterator进行遍历，迭代器每次都是从一个空的位置开始，通过hasNext()来判断，当返回false时表示后面没有数据了结束遍历，获取通过next()方法获取。"></a>2、使用迭代器Iterator进行遍历，迭代器每次都是从一个空的位置开始，通过hasNext()来判断，当返回false时表示后面没有数据了结束遍历，获取通过next()方法获取。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> ArrayList&lt;Hero&gt;();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//放5个Hero进入容器</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.add(<span class="keyword">new</span> Hero(<span class="string">"hero name "</span> +i));</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//第二种遍历，使用迭代器</span></span><br><span class="line">        System.out.println(<span class="string">"--------使用while的iterator-------"</span>);</span><br><span class="line">        Iterator&lt;Hero&gt; it= heros.iterator();</span><br><span class="line">        <span class="comment">//从最开始的位置判断"下一个"位置是否有数据</span></span><br><span class="line">        <span class="comment">//如果有就通过next取出来，并且把指针向下移动</span></span><br><span class="line">        <span class="comment">//直达"下一个"位置没有数据</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            Hero h = it.next();</span><br><span class="line">            System.out.println(h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//迭代器的for写法</span></span><br><span class="line">        System.out.println(<span class="string">"--------使用for的iterator-------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;Hero&gt; iterator = heros.iterator(); iterator.hasNext();) &#123;</span><br><span class="line">            Hero hero = (Hero) iterator.next();</span><br><span class="line">            System.out.println(hero);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、常用的for循环遍历"><a href="#3、常用的for循环遍历" class="headerlink" title="3、常用的for循环遍历."></a>3、常用的for循环遍历.</h3><p>不能进行ArrayList初始化，也不知道到底多少个元素在ArrayList，就是所有遍历出来</p><h2 id="五、ArrayList和LinkedList的区别"><a href="#五、ArrayList和LinkedList的区别" class="headerlink" title="五、ArrayList和LinkedList的区别"></a>五、ArrayList和LinkedList的区别</h2><ul><li><p>ArrayList:顺序结构，插入，删除数据很慢（O(N)），查找快(O(1))，就类似于数组，跟链表的关系一样。</p></li><li><p>LinkedList：链表结构，插入，删除数据快（O(1)），查找慢(O(N))。</p></li></ul><h2 id="六、ArrayList和HashSet区别"><a href="#六、ArrayList和HashSet区别" class="headerlink" title="六、ArrayList和HashSet区别"></a>六、ArrayList和HashSet区别</h2><h3 id="最大区别在于："><a href="#最大区别在于：" class="headerlink" title="最大区别在于："></a>最大区别在于：</h3><h4 id="1、是否有顺序："><a href="#1、是否有顺序：" class="headerlink" title="1、是否有顺序："></a>1、是否有顺序：</h4><ul><li><p>ArrayList：有顺序</p></li><li><p>HashSet：无顺序(集合的无序性)，它的具体顺序既不是按照hashcode的顺序，也不是按照插入顺序，根据在JVM的不用版本中，看到的顺序也是不同的，HashSet的顺序本身不稳定的。</p></li></ul><h4 id="2、是否重复"><a href="#2、是否重复" class="headerlink" title="2、是否重复"></a>2、是否重复</h4><ul><li><p>List中的数据可以重复</p></li><li><p>Set中的数据不能重复</p></li></ul><p>重复判断的标准是：首先看hashcode是否相同，不同，则肯定是不同数据</p><p>如果相同，在比较equals，如果equals相同，则是相同数据，否则是不同数据。</p><h2 id="七、HashSet，LinkedHashSet，TreeSet比较"><a href="#七、HashSet，LinkedHashSet，TreeSet比较" class="headerlink" title="七、HashSet，LinkedHashSet，TreeSet比较"></a>七、HashSet，LinkedHashSet，TreeSet比较</h2><ul><li><p>HashSet：无顺序</p></li><li><p>LinkedHashSet：按照插入顺序</p></li><li><p>TreeSet：从小到大顺序</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        HashSet&lt;Integer&gt; hashSet=<span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="comment">//HashSet中的数据不是按照插入顺序存放</span></span><br><span class="line">        hashSet.add(<span class="number">22</span>);</span><br><span class="line">        hashSet.add(<span class="number">33</span>);</span><br><span class="line">        hashSet.add(<span class="number">55</span>);</span><br><span class="line">        System.out.println(hashSet);</span><br><span class="line">        </span><br><span class="line">        LinkedHashSet&lt;Integer&gt; linkedHashSet=<span class="keyword">new</span> LinkedHashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="comment">//LinkedHashSet中的数据按照插入顺序存放</span></span><br><span class="line">        linkedHashSet.add(<span class="number">22</span>);</span><br><span class="line">        linkedHashSet.add(<span class="number">56</span>);</span><br><span class="line">        linkedHashSet.add(<span class="number">28</span>);</span><br><span class="line">        System.out.println(linkedHashSet);<span class="comment">//22,56,28</span></span><br><span class="line">        </span><br><span class="line">        TreeSet&lt;Integer&gt; treeSet=<span class="keyword">new</span> TreeSet&lt;Integer&gt;();</span><br><span class="line">        <span class="comment">//TreeSet中的数据是进行了排序的从小到大</span></span><br><span class="line">        treeSet.add(<span class="number">22</span>);</span><br><span class="line">        treeSet.add(<span class="number">56</span>);</span><br><span class="line">        treeSet.add(<span class="number">28</span>);</span><br><span class="line">        System.out.println(treeSet);<span class="comment">//22,28,56</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、ArrayList&quot;&gt;&lt;a href=&quot;#一、ArrayList&quot; class=&quot;headerlink&quot; title=&quot;一、ArrayList&quot;&gt;&lt;/a&gt;一、ArrayList&lt;/h2&gt;&lt;p&gt;　　解决了数组的局限性，最常见的容器类，ArrayList容器的容量
      
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA中的抽象类与接口</title>
    <link href="http://yoursite.com/2018/12/14/JAVA%E4%B8%AD%E7%9A%84%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2018/12/14/JAVA中的抽象类与接口/</id>
    <published>2018-12-14T13:54:51.000Z</published>
    <updated>2018-12-14T13:56:43.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、类中声明一个方法，这个方法没有实现体，是一个空方法，这样的方法叫抽象方法，使用abstract修饰符号"><a href="#一、类中声明一个方法，这个方法没有实现体，是一个空方法，这样的方法叫抽象方法，使用abstract修饰符号" class="headerlink" title="一、类中声明一个方法，这个方法没有实现体，是一个空方法，这样的方法叫抽象方法，使用abstract修饰符号"></a>一、类中声明一个方法，这个方法没有实现体，是一个空方法，这样的方法叫抽象方法，使用abstract修饰符号</h2><h2 id="当一个类有抽象方法时候，必须声明为抽象类"><a href="#当一个类有抽象方法时候，必须声明为抽象类" class="headerlink" title="当一个类有抽象方法时候，必须声明为抽象类"></a>当一个类有抽象方法时候，必须声明为抽象类</h2><h3 id="1-声明一个父类-父类类声明一个抽象方法，则父类必须声明为抽象类abstract修饰"><a href="#1-声明一个父类-父类类声明一个抽象方法，则父类必须声明为抽象类abstract修饰" class="headerlink" title="1.声明一个父类(父类类声明一个抽象方法，则父类必须声明为抽象类abstract修饰)"></a>1.声明一个父类(父类类声明一个抽象方法，则父类必须声明为抽象类abstract修饰)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> property;</span><br><span class="line"><span class="comment">//为Hero增加一个抽象方法，必须把Hero声明为abstract。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">float</span> hp;</span><br><span class="line">    <span class="keyword">float</span> armor;</span><br><span class="line">    <span class="keyword">int</span> moveSpeed;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//抽象方法attack</span></span><br><span class="line">    <span class="comment">//Hero的子类会被要求实现attack方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-子类一"><a href="#2-子类一" class="headerlink" title="2.子类一"></a>2.子类一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> property;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ADHero</span> <span class="keyword">extends</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">physicAttack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进行物理攻击"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>&#123;<span class="comment">//继承父类的同事，必须实现父类里的抽象类</span></span><br><span class="line">        physicAttack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-子类二"><a href="#3-子类二" class="headerlink" title="3.子类二"></a>3.子类二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> property;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">APHero</span> <span class="keyword">extends</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">magicAttack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进行魔法攻击"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>&#123;<span class="comment">//继承父类的同事，必须实现父类里的抽象类</span></span><br><span class="line">        magicAttack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、类可以在不提供抽象方法的前提下，直接声明为抽象类。但是一旦被声明为抽象类，就不能狗直接实例化。"><a href="#二、类可以在不提供抽象方法的前提下，直接声明为抽象类。但是一旦被声明为抽象类，就不能狗直接实例化。" class="headerlink" title="二、类可以在不提供抽象方法的前提下，直接声明为抽象类。但是一旦被声明为抽象类，就不能狗直接实例化。"></a>二、类可以在不提供抽象方法的前提下，直接声明为抽象类。但是一旦被声明为抽象类，就不能狗直接实例化。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">float</span> hp;</span><br><span class="line">    <span class="keyword">float</span> armor;</span><br><span class="line">    <span class="keyword">int</span> moveSpeed;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//虽然没有抽象方法，但是被声明了抽象类，不能进行实例化操作。</span></span><br><span class="line">        Hero h=<span class="keyword">new</span> Hero();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、抽象类和接口的区别"><a href="#三、抽象类和接口的区别" class="headerlink" title="三、抽象类和接口的区别"></a>三、抽象类和接口的区别</h2><p>子类只能继承一个抽象类，也印证了java只能单继承</p><p>子类可以继承多个接口</p><p>抽象类可以定义为public,protected,package,private，有静态属性，非静态属性，final和非final属性</p><p>接口中的属性只能是public，静态，final的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> property;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AD</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> moveSpeed=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">float</span> hp;<span class="comment">//hp没有显式声明为public static final,但是它默认就是这个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">magicAttack</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">moveSpeed</span><span class="params">()</span></span>;<span class="comment">//方法没有显式声明为public，接口中默认方法为public</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、类中声明一个方法，这个方法没有实现体，是一个空方法，这样的方法叫抽象方法，使用abstract修饰符号&quot;&gt;&lt;a href=&quot;#一、类中声明一个方法，这个方法没有实现体，是一个空方法，这样的方法叫抽象方法，使用abstract修饰符号&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA中的HashMap与Hashtable</title>
    <link href="http://yoursite.com/2018/12/14/JAVA%E4%B8%AD%E7%9A%84HashMap%E4%B8%8EHashtable/"/>
    <id>http://yoursite.com/2018/12/14/JAVA中的HashMap与Hashtable/</id>
    <published>2018-12-14T13:51:11.000Z</published>
    <updated>2018-12-14T13:52:36.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HashMap和Hashtable"><a href="#HashMap和Hashtable" class="headerlink" title="HashMap和Hashtable"></a>HashMap和Hashtable</h2><p>　　<strong>都实现了Map接口，都是以key-value形式保存数据。</strong></p><ul><li><p>HashMap可以存放null</p></li><li><p>Hashtable不能存放null</p></li><li><p>HashMap不是线程安全类</p></li><li><p>Hashtable是线程安全类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span></span>&#123;</span><br><span class="line">    <span class="comment">//HashMap和Hashtable都实现了Map接口，key-value方式存数据</span></span><br><span class="line">    HashMap&lt;string,string&gt; hashMap=<span class="keyword">new</span> HashMap&lt;string,string&gt;();</span><br><span class="line">    <span class="comment">//HashMap可以用null作key，作value</span></span><br><span class="line">    hashMap.put(<span class="keyword">null</span>,<span class="string">"123"</span>);</span><br><span class="line">    hashMap.put(<span class="string">"123"</span>,<span class="keyword">null</span>);</span><br><span class="line">    Hashtable&lt;string,string&gt; hashtable=<span class="keyword">new</span> Hashtable&lt;string,string&gt;();</span><br><span class="line">    <span class="comment">//Hashtable不能用null作key，不能用null作value</span></span><br><span class="line">    hashtable.put(<span class="keyword">null</span>,<span class="string">"123"</span>);<span class="comment">//报错</span></span><br><span class="line">    hashtable.put(<span class="string">"123"</span>,<span class="keyword">null</span>);<span class="comment">//报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HashMap和Hashtable&quot;&gt;&lt;a href=&quot;#HashMap和Hashtable&quot; class=&quot;headerlink&quot; title=&quot;HashMap和Hashtable&quot;&gt;&lt;/a&gt;HashMap和Hashtable&lt;/h2&gt;&lt;p&gt;　　&lt;strong&gt;
      
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA中的深拷贝与浅拷贝</title>
    <link href="http://yoursite.com/2018/12/14/JAVA%E4%B8%AD%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2018/12/14/JAVA中的深拷贝与浅拷贝/</id>
    <published>2018-12-14T13:48:13.000Z</published>
    <updated>2018-12-14T13:50:14.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java中有两种类型变量，值类型和引用类型。"><a href="#Java中有两种类型变量，值类型和引用类型。" class="headerlink" title="Java中有两种类型变量，值类型和引用类型。"></a>Java中有两种类型变量，值类型和引用类型。</h1><ul><li><p>对于值类型：<strong>copy是属于全盘复制，也就是深拷贝</strong></p></li><li><p>对于引用类型：<strong>一般的copy只是浅拷贝，相当于传递一个引用指针一样。</strong></p></li></ul><p>而当引用类型进行深拷贝的时候必须<strong>实现Cloneable接口中提供的Clone方法</strong>。</p><p>通俗的说：</p><ul><li><p>深拷贝：不仅复制对象的基本类型，还复制原来对象中的对象，完全产生一个新的对象。</p></li><li><p>浅拷贝：只是赋值对象的基本类型，对象还是属于原来的引用。如果是值类型直接拷贝到新的对象，引用类型则是复制一个引用到目标对象而已。</p></li></ul><p>在有指针的情况下，浅拷贝只是增加了一个指针指向已经存在的内存而已。</p><p>深拷贝不但增加了一个指针还申请了一个新的内存，让这个增加的指针指向新的内存。所以当采用深拷贝释放内存的时候不会出现重复释放同一个内存的错误。</p><h3 id="浅拷贝代码如下："><a href="#浅拷贝代码如下：" class="headerlink" title="浅拷贝代码如下："></a>浅拷贝代码如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    Teacher(String name,<span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">    </span><br><span class="line">    Student(String name,<span class="keyword">int</span> age,Teacher teacher)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">        <span class="keyword">this</span>.teacher=teacher;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写clone方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Student student=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            student=(Student)<span class="keyword">super</span>.clone();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(CloneNotSupportedException e)&#123;</span><br><span class="line">            e.printStack();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试浅拷贝</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShallowCopy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Teacher teacher=<span class="keyword">new</span> Teacher(<span class="string">"流浪法师"</span>,<span class="number">50</span>);</span><br><span class="line">        Student student1=<span class="keyword">new</span> Student(<span class="string">"盖伦"</span>,<span class="number">30</span>,teacher);</span><br><span class="line">        Student student2=(Student)student1.clone();</span><br><span class="line">        </span><br><span class="line">        student2.teacher.name=<span class="string">"提莫"</span>;</span><br><span class="line">        student2.teacher.age=<span class="number">20</span>;</span><br><span class="line">        student2.name=<span class="string">"卡特"</span>;</span><br><span class="line">        student2.age=<span class="number">22</span>;</span><br><span class="line">        System.out.println(<span class="string">"student1的姓名:"</span>+student1.name+<span class="string">",student1的老师名字："</span></span><br><span class="line">        +student1.teacher.name+<span class="string">",student1的老师年龄："</span>+student1.teacher.age);<span class="comment">//盖伦，提莫，20</span></span><br><span class="line">        <span class="comment">//发现student2变了，student1变了，说明student1和student2的teacher引用是指向同一个对象。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深拷贝代码如下："><a href="#深拷贝代码如下：" class="headerlink" title="深拷贝代码如下："></a>深拷贝代码如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    Teacher(String name,<span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>&#123;</span><br><span class="line">        Object o=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            object=<span class="keyword">super</span>.clone();<span class="comment">//复制一个对象，相当于申请一片新的内存空间用来存储对象</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(CloneNotSupportedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">    </span><br><span class="line">    Student(String name,<span class="keyword">int</span> age,Teacher teacher)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">        <span class="keyword">this</span>.teacher=teacher;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写clone方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Student student=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            student=(Student)<span class="keyword">super</span>.clone();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(CloneNotSupportedException e)&#123;</span><br><span class="line">            e.printStack();</span><br><span class="line">        &#125;</span><br><span class="line">        student.teacher=(Teacher)teacher.clone();<span class="comment">//进行深拷贝</span></span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试深拷贝</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepCopy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Teacher teacher=<span class="keyword">new</span> Teacher(<span class="string">"流浪法师"</span>,<span class="number">50</span>);</span><br><span class="line">        Student student1=<span class="keyword">new</span> Student(<span class="string">"盖伦"</span>,<span class="number">30</span>,teacher);</span><br><span class="line">        Student student2=(Student)student1.clone();</span><br><span class="line">        </span><br><span class="line">        student2.teacher.name=<span class="string">"提莫"</span>;</span><br><span class="line">        student2.teacher.age=<span class="number">20</span>;</span><br><span class="line">        student2.name=<span class="string">"卡特"</span>;</span><br><span class="line">        student2.age=<span class="number">22</span>;</span><br><span class="line">        System.out.println(<span class="string">"student1的姓名:"</span>+student1.name+<span class="string">",student1的老师名字："</span></span><br><span class="line">        +student1.teacher.name+<span class="string">",student1的老师年龄："</span>+student1.teacher.age);<span class="comment">//盖伦，流浪法师，50</span></span><br><span class="line">        <span class="comment">//发现student2变了，student1还是没变，</span></span><br><span class="line">        <span class="comment">//说明student1和student2的teacher引用不是指向同一个对象。</span></span><br><span class="line">        <span class="comment">//新增了一片存储空间，各自的引用指向了存储空间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java中有两种类型变量，值类型和引用类型。&quot;&gt;&lt;a href=&quot;#Java中有两种类型变量，值类型和引用类型。&quot; class=&quot;headerlink&quot; title=&quot;Java中有两种类型变量，值类型和引用类型。&quot;&gt;&lt;/a&gt;Java中有两种类型变量，值类型和引用类
      
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA中的线程安全</title>
    <link href="http://yoursite.com/2018/12/14/JAVA%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    <id>http://yoursite.com/2018/12/14/JAVA中的线程安全/</id>
    <published>2018-12-14T13:44:15.000Z</published>
    <updated>2018-12-14T13:47:06.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、线程安全"><a href="#一、线程安全" class="headerlink" title="一、线程安全"></a>一、线程安全</h1><p><strong>个人理解</strong>：当多个线程访问一个对象的时候，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获得正确的结果，那么这个对象是线程安全的。</p><p><strong>JAVA中的线程安全</strong>：限定于程序之间存在共享数据访问的这个前提，如果一段代码根本不会与其他线程共享数据，那么从线程安全的角度看，程序无论是串行执行还是多线程执行都是没区别的。</p><p><strong>JAVA中线程安全各种操作共享数据有5类：</strong></p><ul><li>不可变</li><li>绝对线程安全</li><li>相对线程安全</li><li>线程兼容</li><li>线程对立</li></ul><h3 id="1、不可变"><a href="#1、不可变" class="headerlink" title="1、不可变"></a>1、不可变</h3><p><strong>首先不可变（Immutable）</strong>的对象一定是线程安全的，无论是对象的方法实现还是方法的调用者，都不需要采用任何的线程安全保障措施，java中，如果共享数据是一个基本数据类型，那么只要定义时使用final关键字修饰它就可以保证是不可变的。如果共享数据是一个对象，那么就需要保证对象的行为不会对其状态产生任何影响才行。比如说String类对象，是一个典型的不可变对象，那么我们调用它的substring()、replace()、concat()方法都不会影响它原来的值，只会返回一个新构造的字符串对象。这就是线程安全的。</p><p>保证对象行为不影响自己状态的途径有多种，最简单的就是把对象中带有状态的变量都声明为final，这样在构造函数结束之后，他就是不可变的。</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.lang.Integer构造函数，通过内部状态变量value定义为final来保证状态不变</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Integer</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Integer</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value=value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在java的API中符合不可变要求的类型，除了String，还有枚举类型，以及java.lang.Number的不容分子类，比如Long，Double等数值包装类型，BigInteger，BigDecimal等大数据类型。</p><h3 id="2、绝对线程安全"><a href="#2、绝对线程安全" class="headerlink" title="2、绝对线程安全"></a>2、绝对线程安全</h3><p>也就是要求一个类要达到，不管运行时环境如何，调用者都不需要任何额外的同步措施。</p><p>比如说java.util.Vector是一个线程安全的容器，因为它的add()/get()/size()这些方法都是被synchronized关键字修饰的，虽然这样做效率低但是安全的。但是，就算它所有的方法都被修饰为同步，也不意味着调用它的时候永远都不需要同步手段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Vector&lt;Integer&gt; vector=<span class="keyword">new</span> Vector&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            vector.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Thread removeThread=<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vector.size();i++)&#123;</span><br><span class="line">                    vector.remove(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        Thread printThread=<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vector.size().i++)&#123;</span><br><span class="line">                System.out.println(vector.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        removeThread.start();</span><br><span class="line">        printThread.start();</span><br><span class="line">        <span class="comment">//不要同时产生过多的线程，否则会导致操作系统假死</span></span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这段代码会报错，虽然Vector的get(),remove(),size()方法都是同步的，但是多线程的环境中</span></span><br><span class="line"><span class="comment">，如果不在方法调用端做额外的同步措施的话，使用这段代码仍然是不安全的。因为如果</span></span><br><span class="line"><span class="comment">另一个县城恰好在错误的时间里删除了一个元素，导致序号i已经不再可用的话</span></span><br><span class="line"><span class="comment">再用i访问数组就会抛出一个ArrayIndexOutOfBoundsException。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改方法如下：*/</span></span><br><span class="line">publc <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Vector&lt;Integer&gt; vector=<span class="keyword">new</span> Vector&lt;Integer&gt;();</span><br><span class="line">Thread removeThread=<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(vector)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vector.size();i++)&#123;</span><br><span class="line">                vector.remove(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Thread printThread=<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(vector)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vector.size();i++)&#123;</span><br><span class="line">                System.out.println(vector.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">removeThread.start();</span><br><span class="line">printThread.start();</span><br><span class="line"><span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、相对线程安全"><a href="#3、相对线程安全" class="headerlink" title="3、相对线程安全"></a>3、相对线程安全</h3><p>我们通常意义上说的线程安全是相对线程安全。它需要保证对这个对象单独的操作是线程安全的，我们在调用的时候不需要做额外的保护措施，但是对于一些有特定顺序的连续调用，就可鞥需要在调用端使用额外的同步的手段来保证调用的正确性。</p><p>比如Vector、HashTable、Collections的synchronizedCollection()方法包装的集合等都是这样的。</p><h3 id="4、线程兼容"><a href="#4、线程兼容" class="headerlink" title="4、线程兼容"></a>4、线程兼容</h3><p>线程兼容指的是对象本身不是线程安全的，但是可以通过在调用端使用正确的同步手段来保证对象在并发环境中可以安全的使用。比如与Vector对应得ArrayList，HashTable对象的HashMap都是这种情况。</p><h3 id="5、线程对立"><a href="#5、线程对立" class="headerlink" title="5、线程对立"></a>5、线程对立</h3><p>线程对立指的是无论调用端是否采用了同步措施，都无法在多线程环境中并发使用的代码。由于java中天生就具备多线程特性，线程对立这种排斥多线程的代码很少，而且都是有害的，应该避免。</p><h1 id="二、线程安全的实现方法"><a href="#二、线程安全的实现方法" class="headerlink" title="二、线程安全的实现方法"></a>二、线程安全的实现方法</h1><h3 id="1、互斥同步"><a href="#1、互斥同步" class="headerlink" title="1、互斥同步"></a>1、互斥同步</h3><p>一种常见的并发正确性保障手段。同步是指在多线程并发访问共享数据时候，保证共享的数据在同一个时刻只能被一个线程使用。而互斥实现同步的一种手段，临界区（Critical Section）、互斥量（Mutex）、信号量（Semaphore）都是主要互斥的实现方式。互斥是原因，同步是结果。互斥是方法，同步是目的。</p><p><strong>java中：</strong></p><ul><li><p>最基本的互斥同步手段是synchronized关键字，这个关键字是重量级操作，耗时可能比用户代码执行的时间还要长。</p></li><li><p>使用java.util.concurrent包中的重入锁来实现同步。</p></li></ul><p>虚拟机在未来的性能的改进中，肯定也会更加偏向于原生的synchronized，所以还是提倡在synchronized能实现需求的情况下，优先考虑使用synchronized来实现同步。</p><h3 id="2、非阻塞同步"><a href="#2、非阻塞同步" class="headerlink" title="2、非阻塞同步"></a>2、非阻塞同步</h3><p>互斥同步最主要的问题是进行线程阻塞和唤醒所带来的性能问题，因此这种同步也叫做阻塞同步。互斥同步是一种悲观的并发策略。总是认为只要不去做正确的同步措施比如加锁，那么肯定就会出现问题，无论共享数据是否真的会出现竞争，他都要进行枷锁，用户态核心态转换、维护锁计数器和检查是否有被阻塞的线程需要唤醒等操作。</p><p>乐观并发措施：基于冲突检测，就是先进行并发操作，如果没有其他线程争用共享数据，那么操作就成功，如果共享数据有争用，就产生了冲突，那么采用其他补偿措施（常见的补偿措施就是不断地重试，直到成功为止），乐观的并发措施策略使得许多实现都不需要把线程挂起。</p><h3 id="3、无同步方法"><a href="#3、无同步方法" class="headerlink" title="3、无同步方法"></a>3、无同步方法</h3><p>要保证线程安全，并不是一定要进行同步，两者没有因果关系。同步只是保证共享数据争用时正确的手段，如果一个方法本来就不涉及数据共享，那么自然不需要任何同步去保证正确性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、线程安全&quot;&gt;&lt;a href=&quot;#一、线程安全&quot; class=&quot;headerlink&quot; title=&quot;一、线程安全&quot;&gt;&lt;/a&gt;一、线程安全&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;个人理解&lt;/strong&gt;：当多个线程访问一个对象的时候，如果不用考虑这些线程在运行时环境下
      
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
  </entry>
  
</feed>
