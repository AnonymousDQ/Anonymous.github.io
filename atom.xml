<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>drqblog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-13T03:37:38.548Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Victor Drq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>马克思哲学</title>
    <link href="http://yoursite.com/2018/12/13/%E9%A9%AC%E5%85%8B%E6%80%9D%E5%93%B2%E5%AD%A6/"/>
    <id>http://yoursite.com/2018/12/13/马克思哲学/</id>
    <published>2018-12-13T03:36:21.000Z</published>
    <updated>2018-12-13T03:37:38.548Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、马克思主义哲学核心"><a href="#一、马克思主义哲学核心" class="headerlink" title="一、马克思主义哲学核心"></a>一、马克思主义哲学核心</h2><h4 id="1、唯物主义和唯心主义"><a href="#1、唯物主义和唯心主义" class="headerlink" title="1、唯物主义和唯心主义"></a>1、唯物主义和唯心主义</h4><p>哲学是系统化，理论化的世界观，是世界观的理论体系。</p><ul><li>一切哲学都不能调和唯物主义和唯心主义两大基本派别，这是哲学的党性</li><li>唯物主义主张物质第一，精神第二，按世界的本来面目来说世界，不附加外来成分</li><li>唯心主义主张精神第一，物质第二。<ul><li>主观唯心主义：把人的感觉、观念作为唯一真实的存在和世界的本源</li><li>客观唯心主义：把某种脱离个人的精神变为独立的存在，作为世界本源和万物的创造者</li></ul></li><li>唯心主义产生根源：感觉是屏障，不可知论，马克思和旧唯物最主要区别：唯物史观<ul><li>阶级根源：在阶级社会，唯心主义哲学受到反动没落的社会阶级的拥护和利用，所以得到保存和流传。根源不能说主观和客观相背离，因为它是认识错误的原因，可以是教条主义经验主义的错误</li><li>社会根源：社会分工，脑体劳动分离，为片面夸大精神意识的作用提供了条件</li><li>认识论根源：在认识过程中，将认识的某一特征，方面，部分加以夸大。将认识过程中的感性阶段夸大，绝对化，导致主观唯心主义。将认识过程中的理性阶段夸大，绝对化，导致客观唯心主义</li></ul></li><li>旧唯物主义的缺陷：机械性，形而上学，不彻底性，没有确立科学的实践观</li><li>马克思主义的特点：马克思最伟大的贡献，创立唯物史观，旧唯物史因为自然观唯物，历史观唯心。<ul><li>阶级性：公开申明为谁服务，一切辩证法都认为世界是普遍联系的，发展变化的，没有认为世界统一</li><li>实践性：强调理论对实践的依赖关系，理论发过来又指导实践。解决问题的出发点–实践</li><li>革命性与科学性的统一，革命性建立在科学性基础之上，也就是正确认识事物的基础之上。</li></ul></li><li>马哲与具体科学的关系：一般与个别，抽象与具体，指导与被指导，普遍与特殊。</li></ul><h4 id="2、解放思想，实事求是，与时俱进"><a href="#2、解放思想，实事求是，与时俱进" class="headerlink" title="2、解放思想，实事求是，与时俱进"></a>2、解放思想，实事求是，与时俱进</h4><ul><li>实事求是：一切从实际出发，从中找出其固有额规律性，作为我们行动的向导</li><li>解放思想：在马克思主义指导下，破除不符合实际的旧观念，研究新情况，解决新问题，使主观与客观相符合</li><li>与时俱进：马克思主义理论及其指导下的实践要体现时代性，把握规律性，富于创造性。</li><li>解放思想是前提，实事求是是核心，与时俱进，开拓创新是目的，三者相互依存，相互促进。</li></ul><h4 id="3、辩证唯物主义和历史唯物主义的作用"><a href="#3、辩证唯物主义和历史唯物主义的作用" class="headerlink" title="3、辩证唯物主义和历史唯物主义的作用"></a>3、辩证唯物主义和历史唯物主义的作用</h4><ul><li>揭示人类社会的本质和发展规律，为我们理解社会提供思想武器。唯心不是改造世界的思想武器</li><li>为我们认识社会提供了辩证法原则，我们要用联系和发展的观点认识社会</li><li>帮助人们树立正确的世界观，人生观和价值观</li><li>提高人们对社会发展，社会管理规律的认识和运用能力</li></ul><h4 id="4、科学主义，人本主义"><a href="#4、科学主义，人本主义" class="headerlink" title="4、科学主义，人本主义"></a>4、科学主义，人本主义</h4><ul><li>科学主义：否定哲学世界观功能，推崇科学知识，放弃世界观的研究</li><li>人本主义：反对科学和理性，强调人的存在的本质论，不是以人为本，具有非理性主义的特点</li></ul><h4 id="5、世界的物质性和人的实践活动"><a href="#5、世界的物质性和人的实践活动" class="headerlink" title="5、世界的物质性和人的实践活动"></a>5、世界的物质性和人的实践活动</h4><p>庸俗唯物主义的错误是抹杀了意识的主观特征</p><ul><li><p>物质是不依赖于人的意识所反映的客观实在。物质定义的意义：三个划清界限：</p><p>同唯心主义和二元论，同不可知论，同旧唯物主义。正确理解物质范畴要把握自然物质的多样性，客观实在性</p></li><li><p>客观实在：是物质的共同的一般本质，它通过运动表现出来</p></li><li><p>运动是物质的存在方式和根本属性。运动和物质不可分离，设想没有运动的物质是机械唯物论。设想没有物质的运动是唯心论。运动和静止都是物质的固有属性，运动绝对，静止相对，它们互相包含。</p></li><li><p>静止是运动的特殊状态。相对静止使事物呈现多样性，是区分事物基础，衡量事物运动尺度</p></li><li><p>实践是人能动的改造物质世界的对象性活动。形式：生产，处理，变革社会关系和科学实验</p></li><li><p>实践有三个基本特征：客观现实性，自觉能动性，社会历史性。实践目的、手段、结果的反馈调节。</p></li><li><p>主体是指从事实践活动和认识活动的人，客体是主体活动对象的总和。实践活动就是以主体、中介和客体为基本骨架的动态系统，通过实践活动使客体主体化，使主体客体化</p></li></ul><h4 id="6、自在世界和人类世界及其人的实践活动的关系"><a href="#6、自在世界和人类世界及其人的实践活动的关系" class="headerlink" title="6、自在世界和人类世界及其人的实践活动的关系"></a>6、自在世界和人类世界及其人的实践活动的关系</h4><ul><li>主观世界：人的意识、观念世界，是人的头脑反映和把我物质世界的精神活动、心理活动的总和存在主义所谓的存在是指个人的存在，主体和客体相互作用的实质是主体和客体之间的限定和超越的关系</li><li>客观世界：物质的，可以感知的世界，人的意识之外的一切物质运动的总和，包含自然存在和社会存在。主体和客体的关系：目的和手段，创造者和被创造者，能动者和被动这</li><li>自在世界：天然自然，是人类世界产生前的先在世界，是尚未被人化的自然界</li><li>人类世界：属人世界，是在人类实践基础上形成的，人化自然，人类社会的统一体。</li></ul><h4 id="7、意识的产生，本质机器能动作用"><a href="#7、意识的产生，本质机器能动作用" class="headerlink" title="7、意识的产生，本质机器能动作用"></a>7、意识的产生，本质机器能动作用</h4><ul><li>从起源看，意识是物质世界高度发展的产物，是自然界长期发展的产物，又是社会的直接产物。不能说意识创造物质，可以说意识可以转化为物质</li><li>从意识的本质看，意识是物质在人脑的机能和属性，是对客观事物的主观映像</li><li>从意识的作用看，意识对物质具有能动作用。计划性，主观创造性，生理机能调控</li><li>本质：意识是人脑对物质的反映，意识在形式上是主观的，在内容上是客观的，是客观世界的主观映像。不能说意识是物质的东西，只能说意识依赖与物质，没有独立存在的意识和精神</li><li>意识发挥的条件：遵循物质运动的客观规律；必须把正确的思想付诸实践；借助一定的物质条件和手段。对实践结果进行评价：对实践效能、实践效率和实践效果的评价</li></ul><h4 id="8、世界物质统一性原理：要求我们一切从实际出发，实事求是"><a href="#8、世界物质统一性原理：要求我们一切从实际出发，实事求是" class="headerlink" title="8、世界物质统一性原理：要求我们一切从实际出发，实事求是"></a>8、世界物质统一性原理：要求我们一切从实际出发，实事求是</h4><ul><li>世界是统一的，世界的本源是一个，反对一元论，反对二元论</li><li>世界的统一性在于它的物质性，物质是世界的本原，坚持唯物主义，反对唯心主义</li><li>物质世界的统一性是多样性的统一，是在客观实在基础上的统一。坚持辩证唯物反对旧唯物</li></ul><h4 id="9、联系的客观性、普遍性、多样性"><a href="#9、联系的客观性、普遍性、多样性" class="headerlink" title="9、联系的客观性、普遍性、多样性"></a>9、联系的客观性、普遍性、多样性</h4><ul><li><p>联系是：事物内部诸要素之间以及事物之间的相互影响、相互作用和相互制约，是客观的普遍的。坚持用联系的观点，反对孤立片面的观点</p></li><li><p>系统：是由相互联系，相互作用的若干要素组成的具有稳定结构和特定功能的有机整体</p></li><li><p>系统的主要特征：整体性，结构性，层次性，开放性。最主要特征：整体性。</p></li><li><p>科学的任务：揭示事物联系，科学的突破往往表现在把看来没有联系的事物联系起来</p></li><li><p>整体由部分构成，但不等于部分之和。部分离不开整体，否则将失去原有的性质和功能</p><p>整体决定部分，部分影响整体。整体和部分在一定条件下相互转化</p></li></ul><h4 id="10、发展的永恒性和普遍性，发展的实质，唯物辩证法过程轮的内容和意义"><a href="#10、发展的永恒性和普遍性，发展的实质，唯物辩证法过程轮的内容和意义" class="headerlink" title="10、发展的永恒性和普遍性，发展的实质，唯物辩证法过程轮的内容和意义"></a>10、发展的永恒性和普遍性，发展的实质，唯物辩证法过程轮的内容和意义</h4><ul><li><p>运动时指宇宙间所发生的的一切变化和过程</p></li><li><p>发展是具有前进性质的运动，发展的实质是新事物的产生和旧事物的灭亡，新陈代谢</p></li><li><p>新事物必须战胜旧事物：发展的本质：新生旧灭。新事物代表事物发展的基本趋势</p><p>新事物取代旧事物是辩证的否定过程。在社会领域新生事物符合人民大众的根本利益</p></li><li><p>过程指一切事物都有其产生，发展和转化为其他事物的历史。都有它的过去，现在和未来。世界是过程的集合体。世界总过程的主导方向是前进。存在即过程，产生出来的东西都要灭亡</p></li></ul><h4 id="11、规律"><a href="#11、规律" class="headerlink" title="11、规律"></a>11、规律</h4><ul><li>规律是事物内部的本质联系和反战的必然趋势，是本质的，必然的，稳定的，客观的联系</li></ul><h4 id="12、本质和现象"><a href="#12、本质和现象" class="headerlink" title="12、本质和现象"></a>12、本质和现象</h4><ul><li>本质：事物的内在联系和根本性质</li><li>现象：事物的外部联系和表面特征，有真相和假象之分</li><li>本质和现象的辩证关系：<ul><li>现象为感官直接感知，本质为抽象思维把我</li><li>现象是个别，本质是一般</li><li>现象是多变易逝，本质相对稳定</li><li>任何事物都是现象和本质的统一体</li><li>我们能够通过现象认识事物的本质，必须透过现象看本质</li></ul></li></ul><h4 id="13、必然性和偶然性"><a href="#13、必然性和偶然性" class="headerlink" title="13、必然性和偶然性"></a>13、必然性和偶然性</h4><ul><li>必然性：事物联系和发展过程中一定要发生，确定不移的趋势，偶然包含，表现必然，是必然的补充</li><li>偶然性：可以出现，可以不出现，可以这样出现，可以那样出现的不确定趋势。必然制约偶然</li><li>必然性产生于事物内部的根本矛盾，必然性存在于偶然性之中，偶然性背后隐藏着必然性</li></ul><h4 id="14、原因和结果"><a href="#14、原因和结果" class="headerlink" title="14、原因和结果"></a>14、原因和结果</h4><ul><li>原因：引起某种现象的现象</li><li>结果：被某种现象引起的现象</li><li>因果联系是有时间顺序的联系，总是原因在前，结果在后，但并不是任何前后相继的现象都存在着因果关系联系。原因和结果的界限是确定的</li></ul><h4 id="15、事物发展过程中的量变和质变"><a href="#15、事物发展过程中的量变和质变" class="headerlink" title="15、事物发展过程中的量变和质变"></a>15、事物发展过程中的量变和质变</h4><ul><li>质是一事物成为它自身并区别于其他事物的规定性，质和事物的存在是直接同一的</li><li>量是事物存在和发展的规模，程度，速度以及它的构成成分在空间的排列组合等可以用数量表示的规定性，量和事物的存在不是直接同一的，认识量是认识事物的深化和精确化</li><li>度是事物保持自己质的量的范围，幅度和限度。认识度要掌握适度原则</li><li>量变和质变既相互区别，又相互联系<ul><li>区别的标志：事物的变化是否超出度。把同质的事物泣别开来的依据是事物的属性和量</li><li>联系是相互转化和相互渗透：量变向质变转化，量变是质变的必要准备，质变是量变的必然结果；质变向量变转化，质变体现和巩固量变的成果，并为新的量变开拓道路。量变中渗透质变，即在总的量变过程中包含部分质变；质变中渗透量变，即在质变中包含新质在量上的扩张。事物的发展就是由量变到质变，由部分质变到根本质变，在新质的基础上又开始新的量变，如此循环往复，相互交替，以致无穷</li></ul></li></ul><h4 id="16、事物发展中的肯定和否定及其辩证关系，辩证的否定观及其方法论意义"><a href="#16、事物发展中的肯定和否定及其辩证关系，辩证的否定观及其方法论意义" class="headerlink" title="16、事物发展中的肯定和否定及其辩证关系，辩证的否定观及其方法论意义"></a>16、事物发展中的肯定和否定及其辩证关系，辩证的否定观及其方法论意义</h4><ul><li>肯定是事物中保持其存在的因素</li><li>否定是事物中促使其灭亡的因素</li><li>辩证的否定：事物内在矛盾引起的自我否定，包含肯定的否定，既是发展的环节，又是联系的环节，否定规律是新生事物必然要战胜旧事物的哲学依据</li></ul><h4 id="17、矛盾同一性和斗争性辩证关系的原理及其方法论意义"><a href="#17、矛盾同一性和斗争性辩证关系的原理及其方法论意义" class="headerlink" title="17、矛盾同一性和斗争性辩证关系的原理及其方法论意义"></a>17、矛盾同一性和斗争性辩证关系的原理及其方法论意义</h4><ul><li>对立统一规律是唯物辩证法的实质和核心。因为，对立统一规律揭示了事物联系的实质内容和发展的内在动力。它是贯穿于唯物辩证法其他规律和范畴的中心线索。矛盾分析方法是最根本的认识方法。</li><li>斗争性是指矛盾双方之间相互分离，相互排斥的性质和趋势，其形式多种多样。斗争性绝对</li><li>同一性：指矛盾双方之间相互联系，相互吸引的性质和趋势。同一性是相对的</li><li>斗争性和同一性的相互联结，相互制约的：同一性不能脱离斗争而存在，没有斗争性就没有同一性。斗争性也不能够脱离同一性而存在，斗争性寓于同一性之中。矛盾斗争性和同一性相互联结的原理，要求我们在分析和解决矛盾时，必须从对立中把握同一从同一中把握对立。</li></ul><h4 id="18、矛盾同一性和斗争性在事物发展中的作用"><a href="#18、矛盾同一性和斗争性在事物发展中的作用" class="headerlink" title="18、矛盾同一性和斗争性在事物发展中的作用"></a>18、矛盾同一性和斗争性在事物发展中的作用</h4><ul><li>同一性的作用：<ul><li>矛盾的一方可以利用另一方的发展使自己获得发展</li><li>矛盾双方可以相互吸引有利于自身的因素而得到发展。提供矛盾双方得以存在和发展的条件</li><li>矛盾双方向着自己的对立面转化而得到发展。规定事物向自己对立面转化的基本趋势</li></ul></li><li>斗争性的作用：<ul><li>斗争推动矛盾双方力量对比发生变化，造成事物的量变</li><li>斗争促使矛盾双方地位或者性质转换，实现事物的质变</li></ul></li><li>矛盾推动事物的发展，说明事物发展的根本原因不在事物外部，而在事物内存的矛盾性<ul><li>内因是事物发展的根本原因，是变化的根据</li><li>外因是事物发展的第二位的原因，是变化的条件，外因通过内因而起作用。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、马克思主义哲学核心&quot;&gt;&lt;a href=&quot;#一、马克思主义哲学核心&quot; class=&quot;headerlink&quot; title=&quot;一、马克思主义哲学核心&quot;&gt;&lt;/a&gt;一、马克思主义哲学核心&lt;/h2&gt;&lt;h4 id=&quot;1、唯物主义和唯心主义&quot;&gt;&lt;a href=&quot;#1、唯物主义
      
    
    </summary>
    
      <category term="哲学" scheme="http://yoursite.com/categories/%E5%93%B2%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>OGG的组件解析</title>
    <link href="http://yoursite.com/2018/12/12/OGG%E7%9A%84%E7%BB%84%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2018/12/12/OGG的组件解析/</id>
    <published>2018-12-12T09:19:16.000Z</published>
    <updated>2018-12-12T09:26:02.746Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/12/12/OGG的组件解析/F:/blog\source\_posts\OGG的组件解析\ce01e554bd1d3a1935e08c1835696e0b.jpg" alt="mylove"></p><h3 id="一、OGG的各个组件解析（Oracle-GoldenGate）"><a href="#一、OGG的各个组件解析（Oracle-GoldenGate）" class="headerlink" title="一、OGG的各个组件解析（Oracle GoldenGate）"></a>一、OGG的各个组件解析（Oracle GoldenGate）</h3><h4 id="1、Manager："><a href="#1、Manager：" class="headerlink" title="1、Manager："></a>1、Manager：</h4><p>Manager进程是GoldenGate中进程的控制进程，用于管理Extract，Data Pump，Replicat等进程</p><p>在Extract，Data Pump，Replicat进程启动之前，Manager进程必须先要在</p><p>源端和目标端启动，在整个Golden Gate运行期间，它必须保持运行状态</p><ul><li><p>监控与启动Golden Gate的其他进程</p></li><li><p>管理trail文件及Reporting</p></li><li><p>在windows系统上，Manager进程是作为一个服务来启动的，在Unix系统下是一个进程</p></li></ul><h4 id="2、Extract"><a href="#2、Extract" class="headerlink" title="2、Extract"></a>2、Extract</h4><p>Extract进程运行在数据库源端上，他是Golden Gate的捕获机制，可以配置</p><p>Extract进程来做如下工作：</p><ul><li><p>初始数据装载：对于初始数据装载，Extract进程直接从源对象中提取数据</p></li><li><p>同步变换捕获：保持源数据与其他数据集的同步，初始数据同事完成后</p></li><li><p>Extract进程捕获源数据的变换，比如DML变换(增删改)，DDL变化(drop,create,alter)</p></li></ul><h4 id="3、Replicat"><a href="#3、Replicat" class="headerlink" title="3、Replicat"></a>3、Replicat</h4><p>Replicat进程是运行在目标端系统的一个进程，负责读取Extract进程提取到的数据（变更的事务或者DDL变化）</p><p>然后应用到目标数据库</p><p>配置Replicat进程完成如下工作：</p><ul><li>初始化数据装载：对于初始化数据转载，Replicat进程应用数据到目标对象或者路由</li></ul><p>它们一个高速的Bulk-load工具上</p><ul><li>数据同步，将Extract进程捕获到的提交了的事务应用到目标数据库中</li></ul><h4 id="4、Collector"><a href="#4、Collector" class="headerlink" title="4、Collector"></a>4、Collector</h4><p>Collector是一个运行在目标端的一个后台进程</p><p>接收从TCP/IP网路传输过来的数据变化，并写道Trail文件里</p><ul><li>动态Collector：由管理进程自动启动的collector叫做动态collector，用户不能</li></ul><p>与动态collector交互</p><ul><li>静态Collector：可以配置成手工运行Collector，这个就是静态的</li></ul><h4 id="5、Trails"><a href="#5、Trails" class="headerlink" title="5、Trails"></a>5、Trails</h4><p>为了持续的提取与复制数据库变化，Golden Gate将捕获到的数据变化临时存放在磁盘上</p><p>的一系列文件中，这些文件叫做Trail 文件</p><p>这些文件可以在source DB上也可以在Target DB上，也可以在中间系统上，这依赖</p><p>于选择哪种配置情况</p><ul><li><p>在数据库源端上叫做Local Trail或者Extract Trail</p></li><li><p>在目标端的叫做Remote Trail</p></li></ul><h4 id="6、Data-Pumps"><a href="#6、Data-Pumps" class="headerlink" title="6、Data Pumps"></a>6、Data Pumps</h4><p>Data Pump是一个配置在源端的复制的Extract机制</p><p>Data Pump是一个可选组件，如果不配置Data Pump,那么由Extract主进程</p><p>将数据发送到目标端的Remote Trail中</p><p>如果配置了Data Pump，会由Data Pump将Extract主进程写好的本地Trail文件通过网络发送到</p><p>目标端的Remote Trail文件中</p><p>使用Data Pump的好处：</p><ul><li><p>如果目标端或者网络失败，源端的Extract进程不会意外终止</p></li><li><p>需要在不同的阶段实现数据的过滤或者转换</p></li><li><p>多个源数据复制到数据中心</p></li><li><p>数据需要复制到多个目标数据库</p></li></ul><h4 id="7、ADG的解释"><a href="#7、ADG的解释" class="headerlink" title="7、ADG的解释"></a>7、ADG的解释</h4><p>所谓的ADG，就是在备份库，应用redo log的同时，避免资源的浪费</p><p>OGG侧重于数据备份，ADG侧重于高可用</p><p>OGG可以异构，也就是不仅可以用在Oracle，ADG只有oracle可以用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/12/12/OGG的组件解析/F:/blog\source\_posts\OGG的组件解析\ce01e554bd1d3a1935e08c1835696e0b.jpg&quot; alt=&quot;mylove&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;一、OGG的各个组件解
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Oracle数据库优化</title>
    <link href="http://yoursite.com/2018/12/12/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2018/12/12/Oracle数据库优化/</id>
    <published>2018-12-12T09:01:43.000Z</published>
    <updated>2018-12-12T09:02:31.938Z</updated>
    
    <content type="html"><![CDATA[<p>除了给table建立索引之外，保持良好的SQL语句编写。</p><h3 id="1、通过变量的方式来设置参数"><a href="#1、通过变量的方式来设置参数" class="headerlink" title="1、通过变量的方式来设置参数"></a>1、通过变量的方式来设置参数</h3><p>　　比如动态查询的时候，尽量这样写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">好：string strSql=" <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PEOPLE P <span class="keyword">WHERE</span> P.ID=? <span class="string">";</span></span><br><span class="line"><span class="string">坏：string strSql="</span> <span class="keyword">SELECT</span> * FROMM PEOPLE P <span class="keyword">WHERE</span> P.ID= <span class="string">"+ID;</span></span><br></pre></td></tr></table></figure><p>数据库的SQL解析和执行会保存在缓存中，SQL只要有变化，就要重新解析。而”where p.id=”+id的方式在id值发生改变得时候需要重新解析SQL，浪费时间。</p><h3 id="2、尽量不要使用select"><a href="#2、尽量不要使用select" class="headerlink" title="2、尽量不要使用select *"></a>2、尽量不要使用select *</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">好：string strSql=" <span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> people <span class="string">";</span></span><br><span class="line"><span class="string">坏：string strSql="</span> slect I <span class="keyword">from</span> people<span class="string">";</span></span><br></pre></td></tr></table></figure><p>select * 会增加SQL解析的时间，而且把不需要的数据也查询了出来，数据传输很浪费时间。</p><h3 id="3、谨慎使用模糊查询"><a href="#3、谨慎使用模糊查询" class="headerlink" title="3、谨慎使用模糊查询"></a>3、谨慎使用模糊查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">好：string strSql=" <span class="keyword">select</span> * <span class="keyword">from</span> people p <span class="keyword">where</span> p.id <span class="keyword">like</span> <span class="string">'parm%'</span> <span class="string">";</span></span><br><span class="line"><span class="string">坏：string strSql="</span> <span class="keyword">select</span> * <span class="keyword">from</span> people p <span class="keyword">where</span> p.id <span class="keyword">like</span> <span class="string">'%parm%'</span> <span class="string">";</span></span><br></pre></td></tr></table></figure><p>当模糊匹配以%开头，这一列的索引将彻底失效，导致全表扫描，如果不以%开头，则这一列的索引还是有效的。</p><h3 id="4、优先使用UNION-ALL-避免使用UNION"><a href="#4、优先使用UNION-ALL-避免使用UNION" class="headerlink" title="4、优先使用UNION ALL,避免使用UNION"></a>4、优先使用UNION ALL,避免使用UNION</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">好：string strSql=" <span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> people <span class="keyword">union</span> all <span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> teacher <span class="string">";</span></span><br><span class="line"><span class="string">坏：string strSql="</span> <span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> people <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> teacher <span class="string">";</span></span><br></pre></td></tr></table></figure><p>因为UNION会将各查询的子集记录进行比较，比起来UNION ALL，速度会慢很多。</p><h3 id="5、在where语句或者order-by语句中，避免对索引字段进行计算操作。"><a href="#5、在where语句或者order-by语句中，避免对索引字段进行计算操作。" class="headerlink" title="5、在where语句或者order by语句中，避免对索引字段进行计算操作。"></a>5、在where语句或者order by语句中，避免对索引字段进行计算操作。</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">好：string strSql=" <span class="keyword">select</span> <span class="keyword">name</span> ,age <span class="keyword">from</span> people <span class="keyword">where</span> <span class="built_in">date</span>=? <span class="string">";</span></span><br><span class="line"><span class="string">坏：string strSql="</span> <span class="keyword">select</span> <span class="keyword">name</span>,age <span class="keyword">from</span> people wehre trunc(<span class="built_in">date</span>)=? <span class="string">";</span></span><br></pre></td></tr></table></figure><h3 id="6、永远为每张表设置一个ID"><a href="#6、永远为每张表设置一个ID" class="headerlink" title="6、永远为每张表设置一个ID"></a>6、永远为每张表设置一个ID</h3><p>数据库的每一张表都应该设置一个ID作为主键，而且是int型，推荐使用UNSIGNED,并且设置上自动增加的AUTO_INCREMENT的标志。</p><p>即使你的people表有一个主键叫做name的字段，你也别让它成为主键，使用varchar类型作为主键会使得性能下降。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;除了给table建立索引之外，保持良好的SQL语句编写。&lt;/p&gt;
&lt;h3 id=&quot;1、通过变量的方式来设置参数&quot;&gt;&lt;a href=&quot;#1、通过变量的方式来设置参数&quot; class=&quot;headerlink&quot; title=&quot;1、通过变量的方式来设置参数&quot;&gt;&lt;/a&gt;1、通过变量的方
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Oracle数据库之存储过程与游标</title>
    <link href="http://yoursite.com/2018/12/12/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%B8%8E%E6%B8%B8%E6%A0%87/"/>
    <id>http://yoursite.com/2018/12/12/Oracle数据库之存储过程与游标/</id>
    <published>2018-12-12T08:57:45.000Z</published>
    <updated>2018-12-12T09:01:16.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、存储过程"><a href="#一、存储过程" class="headerlink" title="一、存储过程"></a>一、存储过程</h1><p>　　一组为了完成特定功能的SQL语句集，经编译后存储在数据库中，用户通过指定存储过程的名字并给出参数，来执行它。</p><p>在大型数据库中，存储过程和触发器具有重要的作用。无论是存储过程还是触发器，都是SQL语句和流程控制语句的集合。</p><p>存储过程的优点：</p><h4 id="1、存储过程只在创造时进行编译，以后每次执行存储过程都不需要重新编译，一般的SQL语句执行一次就要编译一次，所以使用存储过程可以提高数据库执行速度。"><a href="#1、存储过程只在创造时进行编译，以后每次执行存储过程都不需要重新编译，一般的SQL语句执行一次就要编译一次，所以使用存储过程可以提高数据库执行速度。" class="headerlink" title="　　1、存储过程只在创造时进行编译，以后每次执行存储过程都不需要重新编译，一般的SQL语句执行一次就要编译一次，所以使用存储过程可以提高数据库执行速度。"></a>　　1、存储过程只在创造时进行编译，以后每次执行存储过程都不需要重新编译，一般的SQL语句执行一次就要编译一次，所以使用存储过程可以提高数据库执行速度。</h4><h4 id="2、当对数据库进行复杂操作时（比如对多个表进行CRUD时），可以将复杂的CRUD操作用存储过程封装起来与数据库提供的事务处理结合在一块使用。"><a href="#2、当对数据库进行复杂操作时（比如对多个表进行CRUD时），可以将复杂的CRUD操作用存储过程封装起来与数据库提供的事务处理结合在一块使用。" class="headerlink" title="　　2、当对数据库进行复杂操作时（比如对多个表进行CRUD时），可以将复杂的CRUD操作用存储过程封装起来与数据库提供的事务处理结合在一块使用。"></a>　　2、当对数据库进行复杂操作时（比如对多个表进行CRUD时），可以将复杂的CRUD操作用存储过程封装起来与数据库提供的事务处理结合在一块使用。</h4><h4 id="3、存储过程可以重复使用，可以减少数据库开发人员的工作量。"><a href="#3、存储过程可以重复使用，可以减少数据库开发人员的工作量。" class="headerlink" title="　　3、存储过程可以重复使用，可以减少数据库开发人员的工作量。"></a>　　3、存储过程可以重复使用，可以减少数据库开发人员的工作量。</h4><h4 id="4、存储过程安全性搞，可以设定只有某个用户才具有对指定存储过程的使用权。"><a href="#4、存储过程安全性搞，可以设定只有某个用户才具有对指定存储过程的使用权。" class="headerlink" title="　　4、存储过程安全性搞，可以设定只有某个用户才具有对指定存储过程的使用权。"></a>　　4、存储过程安全性搞，可以设定只有某个用户才具有对指定存储过程的使用权。</h4><p>Oracle的存储过程分为两种：系统存储过程和自定义存储过程。</p><p>系统存储过程：Oracle预先提供的一组完成特功能的存储过程，安装完Oracle 就有。</p><p>自定义存储过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> [<span class="keyword">Or</span> <span class="keyword">Replace</span>] <span class="keyword">Procedure</span> 过程名[参数[<span class="keyword">in</span>/<span class="keyword">out</span>/<span class="keyword">in</span> <span class="keyword">out</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">AS</span>/<span class="keyword">IS</span></span><br><span class="line"></span><br><span class="line">说明部分</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line">可执行部分</span><br><span class="line"></span><br><span class="line">[<span class="keyword">EXCEPTION</span> 错误处理部分]</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> [过程名];</span><br></pre></td></tr></table></figure><p>注：可选的replace：表示如果存储过程已经存在，则用新的存储过程覆盖掉原来的，常用语存储过程的重建。</p><p>参数部分：用于定义多个参数（如果没有参数，可以不写），参数有三种形式：IN,OUT,INT OUT。一般没有指定参数形式的话，默认为IN。</p><p>关键字AS也可以写成IS，后面跟存储过程的说明部分，也可以在这块定义存储过程的局部变量。</p><ul><li>删除存储过程： DROP PROCEDURE 存储过程名；</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建一个统计产品表总数的存储过程CREATE OR REPLACE PROCEDURE product_countAS PRODUCT_SUM NUMBER(10);BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">INTO</span> PRODUCT_SUM <span class="keyword">FROM</span> product_table;</span><br><span class="line">    DBMS_OUTPUT.PUT_LINE('产品数量是：'||PRODUCT_SUM);<span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><ul><li>无参的存储过程：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建一个打印HelloWorld的无参存储过程</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">procedure</span> printHelloWorldas <span class="comment">--说明部分begin</span></span><br><span class="line">    dbms_output.put_line(<span class="string">'Hello World'</span>);</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"> printHelloWorld;<span class="comment">--无参数存储过程的调用</span></span><br><span class="line">方法1、exec printHelloWorld();</span><br><span class="line">方法2、<span class="keyword">begin</span> printHelloWorld();</span><br><span class="line">     <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h1 id="二、游标（Cursor）"><a href="#二、游标（Cursor）" class="headerlink" title="二、游标（Cursor）"></a>二、游标（Cursor）</h1><p>游标：一种PL/SQL控制结构，对SQL语句的处理进行显示控制，便于对表的行数据逐条进行处理。，游标只存留在内存中。一般使用方法是：声明游标—&gt;打开游标—&gt;取出结果—&gt;关闭游标。</p><p>一般使用for循环来操作游标</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--利用for循环创建操作游标DELCARE --声明游标</span></span><br><span class="line">    CURSOR testCursor IS <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> product_table <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br><span class="line">    productInfo product_table%ROWTYPE;<span class="comment">--ROWTYPE类型：表示一行的数据</span></span><br><span class="line">    count NUMBER;<span class="keyword">BEGIN</span>    <span class="comment">--开始操作游标</span></span><br><span class="line">    <span class="keyword">FOR</span> productInfo <span class="keyword">IN</span> testCursor</span><br><span class="line">    <span class="keyword">LOOP</span>    </span><br><span class="line">        <span class="keyword">count</span>:=testCursor%ROWCOUT;<span class="comment">--ROWCOUNT 对游标所操作的行数进行记录</span></span><br><span class="line">        DBMS_OUTPUT.put_line(count||'产品编号：'||productInfo.id);</span><br><span class="line">        DBMS_OUTPUT.put_line(count||'产品名称：'||productInfo.name);    </span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">LOOP</span>;<span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>游标的作用：</p><h4 id="1、指定结果集中特定行的位置"><a href="#1、指定结果集中特定行的位置" class="headerlink" title="1、指定结果集中特定行的位置"></a>1、指定结果集中特定行的位置</h4><h4 id="2、根据当前的结果接位置检索一行或者连续的几行"><a href="#2、根据当前的结果接位置检索一行或者连续的几行" class="headerlink" title="2、根据当前的结果接位置检索一行或者连续的几行"></a>2、根据当前的结果接位置检索一行或者连续的几行</h4><h4 id="3、在结果集的当前位置修改行中的数据"><a href="#3、在结果集的当前位置修改行中的数据" class="headerlink" title="3、在结果集的当前位置修改行中的数据"></a>3、在结果集的当前位置修改行中的数据</h4><h4 id="4、对其他用户所做的数据更改定义不同的敏感级别"><a href="#4、对其他用户所做的数据更改定义不同的敏感级别" class="headerlink" title="4、对其他用户所做的数据更改定义不同的敏感级别"></a>4、对其他用户所做的数据更改定义不同的敏感级别</h4><h4 id="5、根据编程的方式访问数据库"><a href="#5、根据编程的方式访问数据库" class="headerlink" title="5、根据编程的方式访问数据库"></a>5、根据编程的方式访问数据库</h4><p>因为游标的效率比较差，如果游标操作的数据超过一万行，那么就要改写。</p><ul><li><p>显式游标：用户显式的声明的游标，也就是指定的结果集，当查询返回结果超过一行，就需要一个显式游标。</p></li><li><p>隐式游标：所有的CRUD记录为隐式游标，系统帮我们定义。</p><ul><li>%Found：用于校验游标是否成功。</li><li>%NotFound：最后一条记录是否提取，到了游标的尾部，没有记录了就返回true</li><li>%ISOpen：游标是否打开，打开为true</li><li>%RowCount：游标当前提取的行数。</li></ul></li></ul><h1 id="三、创建函数"><a href="#三、创建函数" class="headerlink" title="三、创建函数"></a>三、创建函数</h1><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="keyword">create</span> [<span class="keyword">or</span> <span class="keyword">replace</span>] <span class="keyword">function</span> 函数名(参数列表[<span class="keyword">in</span>/<span class="keyword">out</span>/<span class="keyword">in</span> <span class="keyword">out</span>])</span><br><span class="line">　　<span class="comment">--参数列表的类型：in：输入的参数，out：返回的参数，in out:即是输入参数也是返回参数</span></span><br><span class="line">　　<span class="keyword">return</span> datatype<span class="comment">--返回值类型</span></span><br><span class="line">　　<span class="keyword">as</span>/<span class="keyword">is</span></span><br><span class="line">　　说明部分</span><br><span class="line">　　<span class="keyword">begin</span></span><br><span class="line"> 　　<span class="comment">--执行的SQL</span></span><br><span class="line">　　<span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建一个计算产品平均价格的函数</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> avg_function_product(product_sum_price <span class="keyword">in</span> <span class="built_in">number</span>(<span class="number">10</span>,<span class="number">2</span>),product_count <span class="keyword">in</span> <span class="keyword">out</span> <span class="built_in">number</span>(<span class="number">10</span>,<span class="number">2</span>)) <span class="keyword">return</span> <span class="built_in">number</span>(<span class="number">10</span>,<span class="number">2</span>)<span class="keyword">as</span></span><br><span class="line">    product_price <span class="built_in">number</span>(<span class="number">10</span>,<span class="number">2</span>);<span class="keyword">begin</span></span><br><span class="line">    product_price:=product_sum_weight/product_count;    </span><br><span class="line">    return product_price;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建一个比较大小的自定义函数</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> testCompare(args1 <span class="keyword">in</span> <span class="built_in">number</span>,args2 <span class="keyword">in</span> <span class="built_in">number</span>)<span class="keyword">return</span> numberasbegin</span><br><span class="line">    <span class="keyword">if</span> args1&gt;args2 <span class="keyword">then</span> <span class="keyword">return</span> args1;</span><br><span class="line">    else return args2;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> testCompare;<span class="comment">--测试调用</span></span><br><span class="line"><span class="keyword">select</span> testCompare(<span class="number">12</span>,<span class="number">57</span>) <span class="keyword">from</span> product_table;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、存储过程&quot;&gt;&lt;a href=&quot;#一、存储过程&quot; class=&quot;headerlink&quot; title=&quot;一、存储过程&quot;&gt;&lt;/a&gt;一、存储过程&lt;/h1&gt;&lt;p&gt;　　一组为了完成特定功能的SQL语句集，经编译后存储在数据库中，用户通过指定存储过程的名字并给出参数，来执行
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Oracle数据库之触发器</title>
    <link href="http://yoursite.com/2018/12/12/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
    <id>http://yoursite.com/2018/12/12/Oracle数据库之触发器/</id>
    <published>2018-12-12T08:56:22.000Z</published>
    <updated>2018-12-12T08:57:06.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、触发器"><a href="#一、触发器" class="headerlink" title="一、触发器"></a>一、触发器</h1><p>有点类似AOP里的拦截器，触发器不能传递参数，也不能输出参数，也不能显式调用，只有当满足触发器条件的时候Oracle会自动调用。</p><p>触发器：</p><h4 id="1、语句级别的触发器：CRUD操作"><a href="#1、语句级别的触发器：CRUD操作" class="headerlink" title="　　1、语句级别的触发器：CRUD操作"></a>　　1、语句级别的触发器：CRUD操作</h4><h4 id="2、行级别的触发器"><a href="#2、行级别的触发器" class="headerlink" title="　　2、行级别的触发器"></a>　　2、行级别的触发器</h4><h4 id="3、系统级别的触发器：数据库的关闭，启动"><a href="#3、系统级别的触发器：数据库的关闭，启动" class="headerlink" title="　　3、系统级别的触发器：数据库的关闭，启动"></a>　　3、系统级别的触发器：数据库的关闭，启动</h4><h4 id="4、用户事件的触发器：进行drop，alter，create时候触发"><a href="#4、用户事件的触发器：进行drop，alter，create时候触发" class="headerlink" title="　　4、用户事件的触发器：进行drop，alter，create时候触发"></a>　　4、用户事件的触发器：进行drop，alter，create时候触发</h4><h1 id="二、触发器的创建"><a href="#二、触发器的创建" class="headerlink" title="二、触发器的创建"></a>二、触发器的创建</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建行级别的触发器CREATE OR REPLACE trigger trigger_update_product_table</span></span><br><span class="line">AFTER UPDATEON product_tableFOR EACH ROW    <span class="comment">--每更新一行，就触发一次BEGIN</span></span><br><span class="line">    <span class="comment">--Oracle里面对触发器提供了特殊的对象:NEW   :OLD来访问更新前后的数据</span></span><br><span class="line">    DBMS_OUTPUT.put_line('更新后'||:NEW.name);<span class="comment">--orcle使用||符号链接字符串而已，相当于java中的+连接字符串</span></span><br><span class="line">    DBMS_OUTPUT.put_line('更新前'||:OLD.name);    </span><br><span class="line">    IF UPDATING THEN</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;    </span><br><span class="line">    IF INSETINGEND;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建表级别的触发器CREATE OR REPLACE trigger trigger_update_product_table</span></span><br><span class="line">AFTER UPDATEON product_tableBEGIN</span><br><span class="line">    <span class="comment">--表级别触发器里面，不允许使用:NEW  :OLD变量</span></span><br><span class="line">    <span class="comment">--DBMS.OUTPUT.put_line('更新后：'||:NEW.name);</span></span><br><span class="line">    <span class="comment">--DBMS.OUTPUT.put_line('更新前：'||:OLD.name);END;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、触发器&quot;&gt;&lt;a href=&quot;#一、触发器&quot; class=&quot;headerlink&quot; title=&quot;一、触发器&quot;&gt;&lt;/a&gt;一、触发器&lt;/h1&gt;&lt;p&gt;有点类似AOP里的拦截器，触发器不能传递参数，也不能输出参数，也不能显式调用，只有当满足触发器条件的时候Oracle
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Oracle数据库</title>
    <link href="http://yoursite.com/2018/12/12/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2018/12/12/Oracle数据库/</id>
    <published>2018-12-12T08:53:35.000Z</published>
    <updated>2018-12-12T08:55:40.238Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、Oracle中使用rownum来进行分页，这个是效率最好的分页方法"><a href="#1、Oracle中使用rownum来进行分页，这个是效率最好的分页方法" class="headerlink" title="1、Oracle中使用rownum来进行分页，这个是效率最好的分页方法"></a>1、Oracle中使用rownum来进行分页，这个是效率最好的分页方法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> ( <span class="keyword">select</span> <span class="keyword">rownum</span> rn,a <span class="keyword">from</span> tabName <span class="keyword">where</span> <span class="keyword">rownum</span>&lt;=<span class="number">20</span>) </span><br><span class="line"><span class="keyword">where</span> rn&gt;<span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="2、Oracle的索引使用"><a href="#2、Oracle的索引使用" class="headerlink" title="2、Oracle的索引使用"></a>2、Oracle的索引使用</h3><h4 id="创建索引："><a href="#创建索引：" class="headerlink" title="创建索引："></a>创建索引：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> index_name <span class="keyword">on</span> table_name(collum_name)</span><br></pre></td></tr></table></figure><h4 id="索引使用规则："><a href="#索引使用规则：" class="headerlink" title="索引使用规则："></a>索引使用规则：</h4><p>　　1、经常和其他表进行连接的表，在连接字段上应该建立索引。</p><p>　　2、经常出现在where子句中的字段而且过滤性很强的，特别是大表的字段，应该建立索引</p><h4 id="索引的优点："><a href="#索引的优点：" class="headerlink" title="索引的优点："></a>索引的优点：</h4><p>　　1、建立唯一性索引，可以保证数据库表中的每一行数据的唯一性</p><p>　　2、大大加快数据的检索速度，加速了表和表之间的连接，特别是实现数据的参照完整性。</p><p>　　3、在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间</p><h4 id="索引的缺点："><a href="#索引的缺点：" class="headerlink" title="索引的缺点："></a>索引的缺点：</h4><p>　　1、索引创建在表上，不能创建在索引上</p><p>　　2、创建索引和维护索引耗费时间，时间随着数据量的增加而增加</p><p>　　3、索引需要占用物理空间，除了数据表占用数据空间之外，每一个索引还要占用一定的物理空间，如果要建立聚集索引，那么消耗的空间更大，一个表只能有一个聚集索引。</p><p>　　4、当对表中的数据进行增加，删除，修改的时候，索引也需要动态的维护，降低了数据的维护速度。</p><h3 id="3、视图的使用"><a href="#3、视图的使用" class="headerlink" title="3、视图的使用"></a>3、视图的使用</h3><h4 id="创建视图："><a href="#创建视图：" class="headerlink" title="创建视图："></a>创建视图：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> view_name <span class="keyword">as</span> <span class="keyword">select</span> column_name <span class="keyword">from</span> table_name</span><br></pre></td></tr></table></figure><h4 id="视图的优点："><a href="#视图的优点：" class="headerlink" title="视图的优点："></a>视图的优点：</h4><p>　　1、可以简单的将视图理解为SQL查询语句，视图最大的好处就是不占用系统空间</p><p>　　2、一些安全性很高的系统，不会公布系统的表结构，可能会使用视图将一些敏感信息过滤或者重命名后公布结构</p><p>　　3、简化查询，可以控制权限，在使用的时候需要将视图的使用权限grant给用户。</p><h3 id="4、合并查询"><a href="#4、合并查询" class="headerlink" title="4、合并查询"></a>4、合并查询</h3><p>有时候，为了合并多个select语句的结果，可以使用集合操作符号UNION，UNION ALL，INTERSECT，MINUS多用于数据量比较大的数据库，运行速度快。</p><p>　　1、union：取得两个结果集的并集，使用它时，会自动去掉结果集中重复行</p><p>　　2、union all：也是取得两个结果集的并集，但是不会取消重复行，也不会排序。</p><p>　　3、intersect：取得两个结果集的交集</p><p>　　4、minus：取得两个结果集的差集。</p><h3 id="5、维护数据的完整性"><a href="#5、维护数据的完整性" class="headerlink" title="5、维护数据的完整性"></a>5、维护数据的完整性</h3><p>数据的完整性用于确保数据库数据遵从一定的商业规则和逻辑规则。</p><p>Oracle中，数据完整性可以使用约束，触发器，应用程序（存储过程，函数）来实现。这三个因为约束更容易维护，并且具有最好的性能，所以作为维护数据完整性的首选。</p><p>不过约束还可以用:not null，unique，primary key，foreign key，check</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、Oracle中使用rownum来进行分页，这个是效率最好的分页方法&quot;&gt;&lt;a href=&quot;#1、Oracle中使用rownum来进行分页，这个是效率最好的分页方法&quot; class=&quot;headerlink&quot; title=&quot;1、Oracle中使用rownum来进行分页
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>数组与链表</title>
    <link href="http://yoursite.com/2018/12/12/%E6%95%B0%E7%BB%84%E4%B8%8E%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2018/12/12/数组与链表/</id>
    <published>2018-12-12T08:51:52.000Z</published>
    <updated>2018-12-12T08:52:53.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内存的工作原理"><a href="#内存的工作原理" class="headerlink" title="内存的工作原理"></a>内存的工作原理</h1><h3 id="1-个人理解："><a href="#1-个人理解：" class="headerlink" title="1.个人理解："></a>1.个人理解：</h3><p>　　比如你要去逛超市，需要将东西寄存，寄存处有一个柜子，柜子有很多抽屉。每个抽屉可以放一样东西，你有两样东西，所以要了两个抽屉。这大概就是计算机内存的工作原理。计算机就像很多抽屉的集合体，每个抽屉都有地址。</p><p>　　当你需要将数据存储到内存时，你请求计算机提供存储空间，计算机会给你一个存储地址。但是当你要存储多项数据时，有两种基本方式：1.使用数组 2.使用链表，但是他们并不是都适用于所有的情形，要进行适当的选择。</p><h3 id="2-数组和链表"><a href="#2-数组和链表" class="headerlink" title="2.数组和链表"></a>2.数组和链表</h3><p>数组：在内存中都是相连的（紧靠在一起的）</p><p>链表：链表中的严肃可存储在内存的任何地方。链表的每个元素都存储了下一个元素的地址，从而使得一系列随机的内存地址串在了一起。</p><ul><li><h4 id="访问元素（查询）：数组更好选择"><a href="#访问元素（查询）：数组更好选择" class="headerlink" title="访问元素（查询）：数组更好选择"></a>访问元素（查询）：数组更好选择</h4></li></ul><p>　　但是链表存在问题，比如当你需要读取链表的最后一个元素时，你不能直接读取，因为你根本不知道它所处的地址，所以必须先访问第一个元素，然后获取第二个元素的地址，在访问第三个，以此类推，直到访问到最后一个元素。当你需要同时读取所有元素时，链表的效率很高。但是当你需要跳跃读取某个元素，链表的效率很低。数组不一样，因为你是知道每个元素的地址的，根据数组的下标可以算出来。比如一个数组里有五个元素，起始地址为000，那么第五个元素的地址肯定是004.所以当你需要随机访问元素时，数组效率很高，可以迅速的找到数组的任何元素。在链表中，元素并非靠在一起，你无法迅速计算出第五个元素的内存地址，必须县访问第一个元素以获取第二个，依次下去。</p><ul><li><h4 id="插入操作（中间插入）：链表更好选择"><a href="#插入操作（中间插入）：链表更好选择" class="headerlink" title="插入操作（中间插入）：链表更好选择"></a>插入操作（中间插入）：链表更好选择</h4></li></ul><p>　　加入你要在中间插入一个元素，使用链表时，插入元素很简单，只需要修改前面那个元素的指针指向。但是使用数组时，则必须先将后面的元素都向后移动，如果没有足够的空间，可能还要将整个数组复制到其他地方。</p><ul><li><h4 id="删除操作：链表更好选择"><a href="#删除操作：链表更好选择" class="headerlink" title="删除操作：链表更好选择"></a>删除操作：链表更好选择</h4></li></ul><p>　　因为你只需要修改前一个元素指向的地址就行。使用数组，删除元素后，比如将后面的元素都向前移动。不同于插入，删除元素总能成功。如果内存中没有足够的空间，插入操作可能失败，但是任何情况下都能将元素删除</p><table><thead><tr><th style="text-align:center">比较</th><th style="text-align:center">数组</th><th style="text-align:center">链表</th></tr></thead><tbody><tr><td style="text-align:center">读取</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(N)</td></tr><tr><td style="text-align:center">插入</td><td style="text-align:center">O(N)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">删除</td><td style="text-align:center">O(N)</td><td style="text-align:center">O(1)</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内存的工作原理&quot;&gt;&lt;a href=&quot;#内存的工作原理&quot; class=&quot;headerlink&quot; title=&quot;内存的工作原理&quot;&gt;&lt;/a&gt;内存的工作原理&lt;/h1&gt;&lt;h3 id=&quot;1-个人理解：&quot;&gt;&lt;a href=&quot;#1-个人理解：&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="计算机" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>折半查找</title>
    <link href="http://yoursite.com/2018/12/12/%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE/"/>
    <id>http://yoursite.com/2018/12/12/折半查找/</id>
    <published>2018-12-12T08:48:23.000Z</published>
    <updated>2018-12-12T08:50:41.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><ul><li><p>线性结构：顺序查找，折半查找，分块查找</p></li><li><p>树形结构：二叉搜索树（二叉排序树），AVL平衡二叉树，B树，B+树</p></li><li><p>散列结构：散列表Hash，性能分析，冲突处理，效率指标–平均查找长度，查找成功，查找失败</p></li></ul><h4 id="线性表顺序查找："><a href="#线性表顺序查找：" class="headerlink" title="线性表顺序查找："></a>线性表顺序查找：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">List</span>&#123;</span></span><br><span class="line">    ElemType *elem;</span><br><span class="line">    <span class="keyword">int</span> table_len;<span class="comment">//表长</span></span><br><span class="line">&#125;SSTable;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search_Seq</span><span class="params">(SSTable st,ElemType key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//顺序表st种顺序查找关键字key的元素，并返回元素的表中位置</span></span><br><span class="line">    st.elem[<span class="number">0</span>]=key;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=st.table_len;st.elem[i]!=key;--i)<span class="comment">//从后往找</span></span><br><span class="line">    &#123;        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>折半查找：二分查找，只用在有序的顺序表</p></li><li><p>算法思想：首先将给定值key和表中中间位置元素的关键字比较，如果相等，成功，返回元素位置</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Binary_Search</span><span class="params">(SeqList L,ElemType key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low=<span class="number">0</span>,mid;</span><br><span class="line">    <span class="keyword">int</span> high=L.Table_len<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high)</span><br><span class="line">    &#123;</span><br><span class="line">        mid=(low+high)/<span class="number">2</span>;<span class="comment">//取中间位置</span></span><br><span class="line">        <span class="keyword">if</span>(L.elem[mid==key])<span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(L.elem[mid]&gt;key)high=mid<span class="number">-1</span>;<span class="comment">//关键字比中间值小，从前半部分查找</span></span><br><span class="line">        <span class="keyword">else</span> low=mid+<span class="number">1</span>;<span class="comment">//关键字比中间值大，从后半部分查找</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;<span class="comment">//时间复杂度为O(logN)</span></span><br></pre></td></tr></table></figure><ul><li><p>分块查找：索引顺序查找，吸取顺序查找和折半查找的优点，有动态结构，适用于快速查找</p></li><li><p>B树：多路平衡查找树</p></li><li><p>Hash表：一个把查找表中的关键字映射成该关键字对应地址的函数，叫做Hash(key)=Addr。</p></li><li><p>散列表：根据关键字而直接进行访问的数据结构，也就是，散列表建立了关键字和存储地址之间的一种直接映射关系。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;查找&quot;&gt;&lt;a href=&quot;#查找&quot; class=&quot;headerlink&quot; title=&quot;查找&quot;&gt;&lt;/a&gt;查找&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;线性结构：顺序查找，折半查找，分块查找&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;树形结构：二叉搜索树（二叉排序树），AVL平衡二
      
    
    </summary>
    
      <category term="计算机" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="http://yoursite.com/2018/12/12/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2018/12/12/二叉树/</id>
    <published>2018-12-12T08:36:24.000Z</published>
    <updated>2018-12-12T08:47:41.841Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树的遍历："><a href="#二叉树的遍历：" class="headerlink" title="二叉树的遍历："></a>二叉树的遍历：</h2><ul><li><p>前序遍历：根左右</p></li><li><p>中序遍历：左根右</p></li><li><p>后序遍历：左右根</p></li><li><p>层次遍历：一层一层的遍历，类似广度优先</p></li></ul><h2 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h2><ul><li>二叉树以二叉链表结构存储，也就是1个数据域，两个指针域（分别指向左右孩子）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二叉树的二叉链表结构定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiTNode,*BiTree</span><br></pre></td></tr></table></figure><ul><li>二叉树的建立，先按照前序遍历的方式建立二叉树，当然也可以按照中序遍历或者后序遍历的方式建立二叉树</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以前序遍历的方式建立二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree *T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ElemType ch;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;ch;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'#'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *T=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        *T=(BiTNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">        <span class="keyword">if</span>(!*T)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">exit</span>(OVERFLOW);<span class="comment">//分配内存失败退出</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            (*T)-&gt;data=ch;<span class="comment">//生成结点</span></span><br><span class="line">            CreateBiTree(&amp;(*T)-&gt;lchild);<span class="comment">//构造左子树</span></span><br><span class="line">            CreateBiTree(&amp;(*T)-&gt;rchild);<span class="comment">//构造右子树</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归前序遍历二叉树"><a href="#递归前序遍历二叉树" class="headerlink" title="递归前序遍历二叉树"></a>递归前序遍历二叉树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归方式前序遍历二叉树</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraverse</span><span class="params">(BiTree T,<span class="keyword">int</span> level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Display(T-&gt;data);</span><br><span class="line">        Floor(T-&gt;data,level);<span class="comment">//输出了层数</span></span><br><span class="line">        PreOrderTraverse(T-&gt;lchild,level+<span class="number">1</span>);</span><br><span class="line">        PreOrderTraverse(T-&gt;rchild,level+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归中序遍历二叉树"><a href="#递归中序遍历二叉树" class="headerlink" title="递归中序遍历二叉树"></a>递归中序遍历二叉树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BiTree T,<span class="keyword">int</span> level)</span></span></span><br><span class="line"><span class="function"></span>&#123;    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        InOrderTraverse(T-&gt;lchild,level+<span class="number">1</span>);</span><br><span class="line">        Display(T-&gt;data);</span><br><span class="line">        Floor(T-&gt;data,level);</span><br><span class="line">        InOrderTraverse(T-&gt;rchild,level+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归后序遍历二叉树"><a href="#递归后序遍历二叉树" class="headerlink" title="递归后序遍历二叉树"></a>递归后序遍历二叉树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraverse</span><span class="params">(BiTree T,<span class="keyword">int</span> level)</span></span></span><br><span class="line"><span class="function"></span>&#123;    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        PostOrderTraverse(T-&gt;lchild,level+<span class="number">1</span>);</span><br><span class="line">        PostOrderTraverse(T-&gt;rchild,level+<span class="number">1</span>);</span><br><span class="line">        Display(T-&gt;data);</span><br><span class="line">        Floor(T-&gt;data,level);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中序遍历非递归"><a href="#中序遍历非递归" class="headerlink" title="中序遍历非递归"></a>中序遍历非递归</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">InitStack(S);</span><br><span class="line">BiTree p=T;<span class="comment">//p是遍历指针</span></span><br><span class="line"><span class="keyword">while</span>(p||!isEmpty(S))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p)<span class="comment">//根指针进站，遍历左子树</span></span><br><span class="line">&#123;</span><br><span class="line">Push(S,p);</span><br><span class="line">p=p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">Pop(S,p);</span><br><span class="line">visit(p);</span><br><span class="line">p=p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码如下："><a href="#完整代码如下：" class="headerlink" title="完整代码如下："></a>完整代码如下：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;<span class="comment">//二叉树的二叉链表结构，也就是二叉树的存储结构，1个数据域，2个指针域（分别指向左右子结点）</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> &#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> <span class="title">lchild</span>,<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以前序遍历的方式建立二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree *T)</span> </span>&#123;</span><br><span class="line">    ElemType ch;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;ch;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'#'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *T=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">`       T=(BiTNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">        <span class="keyword">if</span>(!T)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">exit</span>(OVERFLOW);<span class="comment">//分配内存失败退出</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">             (T)-&gt;data=ch;<span class="comment">//生成结点</span></span><br><span class="line">             CreateBiTree(&amp;(T)-&gt;lchild);<span class="comment">//构造左子树</span></span><br><span class="line">             CreateBiTree(&amp;(*T)-&gt;rchild);<span class="comment">//构造右子树</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//将二叉树前序遍历输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Display</span><span class="params">(ElemType ch)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ch&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在输出的基础上，输出层数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floor</span><span class="params">(ElemType ch,<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ch&lt;&lt;<span class="string">"在第"</span>&lt;&lt;level&lt;&lt;<span class="string">"层"</span>&lt;&lt;end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归方式前序遍历二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraverse</span><span class="params">(BiTree T,<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Display(T-&gt;data);</span><br><span class="line">        Floor(T-&gt;data,level);<span class="comment">//输出了层数</span></span><br><span class="line">        PreOrderTraverse(T-&gt;lchild,level+<span class="number">1</span>);</span><br><span class="line">        PreOrderTraverse(T-&gt;rchild,level+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BiTree T,<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        InOrderTraverse(T-&gt;lchild,level+<span class="number">1</span>);</span><br><span class="line">        Display(T-&gt;data);</span><br><span class="line">        Floor(T-&gt;data,level);</span><br><span class="line">        InOrderTraverse(T-&gt;rchild,level+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraverse</span><span class="params">(BiTree T,<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        PostOrderTraverse(T-&gt;lchild,level+<span class="number">1</span>);</span><br><span class="line">        PostOrderTraverse(T-&gt;rchild,level+<span class="number">1</span>);</span><br><span class="line">        Display(T-&gt;data);</span><br><span class="line">        Floor(T-&gt;data,level);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">int</span> level=<span class="number">1</span>;<span class="comment">//表示层数</span></span><br><span class="line">    BiTree T=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请以前序遍历的方式输入二叉树："</span>;<span class="comment">//类似输入AB#D##C##</span></span><br><span class="line">    CreateBiTree(&amp;T);<span class="comment">//建立二叉树，没有树，无法遍历</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"递归前序遍历输出："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    PostOrderTraverse(T,level);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;end;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"递归中序遍历输出为："</span>&lt;&lt;end;</span><br><span class="line">    InOrderTraverse(T,level);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"递归后序遍历输出为："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    PostOrderTraverse(T,level);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;二叉树的遍历：&quot;&gt;&lt;a href=&quot;#二叉树的遍历：&quot; class=&quot;headerlink&quot; title=&quot;二叉树的遍历：&quot;&gt;&lt;/a&gt;二叉树的遍历：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前序遍历：根左右&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;中序遍历：左根右&lt;/p&gt;
&lt;/
      
    
    </summary>
    
      <category term="计算机" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>Python3入门</title>
    <link href="http://yoursite.com/2018/12/12/Python3%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/12/12/Python3入门/</id>
    <published>2018-12-12T03:06:14.000Z</published>
    <updated>2018-12-12T07:56:45.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python的入门"><a href="#Python的入门" class="headerlink" title="Python的入门"></a>Python的入门</h1><ul><li><p>Win+R键，输入cmd，输入python，查看版本</p><p><img src="/2018/12/12/Python3入门/C:/Users\DELL\Desktop\6.gif" alt="python version"></p></li><li><p>使用交互式IPython运行Python</p><p>IPython是一个Python的交互式shell，比默认的Python shell好用多，支持变量自动补全，自动缩进，支持bash shell命令，内置了许多很有用的功能和函数</p><h5 id="安装：pip-install-ipython"><a href="#安装：pip-install-ipython" class="headerlink" title="安装：pip install ipython"></a>安装：pip install ipython</h5></li></ul><h3 id="Python3基础语法"><a href="#Python3基础语法" class="headerlink" title="Python3基础语法"></a>Python3基础语法</h3><ul><li><p>编码</p><p>默认情况下，Python3源码文件以UTF-8编码，所有字符串都是UNICODE字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  -*-coding:cp-1252 -*-</span></span><br></pre></td></tr></table></figure></li><li><p>注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这是第一个注释</span></span><br><span class="line">print(<span class="string">"hello,Python3！"</span>)</span><br><span class="line">多行注释，用<span class="string">'''或者"""</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">注释块</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">注释块</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></li><li><p>行与缩进</p><p>python最具有特色就是使用缩进来表示代码块，不需要使用大括号{}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">True</span>:</span><br><span class="line">    print(<span class="string">"True"</span>)</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"False"</span>)</span><br></pre></td></tr></table></figure></li><li><p>数字类型Number</p><p>python中数字有四种类型：整数，布尔，浮点，复数</p><ul><li>int：整数，表示长整型</li><li>bool：布尔，True，False</li><li>float:浮点数，1.23,3E-2</li><li>complex:复数，1+2j，1.1+2.2j</li></ul></li><li><p>字符串String</p><p>python中单引号和双引号使用完全相同</p><p>三个引号，用来表示多行的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">word=<span class="string">'字符串'</span></span><br><span class="line">sentence=<span class="string">"这是一个句子"</span></span><br><span class="line">paragraph=<span class="string">"""这是一个段落</span></span><br><span class="line"><span class="string">，可以多行组成</span></span><br><span class="line"><span class="string">"""</span><span class="string">"</span></span><br></pre></td></tr></table></figure></li><li><p>import与from…import</p><ul><li><p>使用import或者from…import导入相应的模块</p></li><li><p>将整个模块导入：import module</p></li><li><p>从某个模块中导入某个函数：from module import function</p></li><li><p>从某个模块中导入多个函数：from module import function1,function2</p></li><li><p>将某个模块中的全部函数导入：from module import *</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入sys模块</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(<span class="string">"======================Python import module==========="</span>)</span><br><span class="line">print(<span class="string">'命令行参数为：'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sys.argv:</span><br><span class="line">    print(i)</span><br><span class="line">print(<span class="string">'\n python 路径为'</span>,sys.path)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Python3基本数据类型</p><ul><li><p>python中的变量不需要生命，每个变量在使用之前都必须复制，变量赋值以后该变量才会被创建。</p></li><li><p>在Python中，变量就是变量，没有类型，我们所说的类型是变量所指的内存中对象的类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">couter=<span class="number">100</span><span class="comment">#整型变量</span></span><br><span class="line">miles=<span class="number">100.0</span><span class="comment">#浮点型变量</span></span><br><span class="line">name=<span class="string">'python3'</span><span class="comment">#字符串</span></span><br><span class="line">print(counter)</span><br><span class="line">print(miles)</span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Python3的标准数据类型</p><ul><li><p>Number数字</p><ul><li><p>Python3中支持，int,float,bool,complex</p></li><li><p>内置函数type()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a,b,c,d=<span class="number">20</span>,<span class="number">1.1</span>,<span class="keyword">True</span>,<span class="number">1</span>+<span class="number">2j</span></span><br><span class="line">print(type(a),type(b),type(c),type(d))</span><br><span class="line"><span class="comment">#&lt;class 'int'&gt; &lt;class 'float'&gt; &lt;class 'bool'&gt; &lt;class 'complex'&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>内置函数isinstance(),类似java中instanceof</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">111</span></span><br><span class="line">isinstance(a,int)</span><br><span class="line"><span class="comment">#True</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>String字符串</p><ul><li><p>Python使用反斜杠\转义特殊字符，如果不想让反斜杠发生转义，可以再字符串前面添加一个r，表示原始字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Py\thon3'</span>)</span><br><span class="line"><span class="comment">#Py    thon3</span></span><br><span class="line">print(<span class="string">r'Py\thon3'</span>)</span><br><span class="line"><span class="comment">#Py\thon3</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>List列表</p><p>List列表是Python中使用最频繁的数据类型</p><p>列表可以完成大多数集合类的数据结构实现。</p><p>变量[头下标:尾下标]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list=[<span class="string">'abcd'</span>,<span class="number">123</span>,<span class="number">2.1</span>,<span class="number">2</span>+<span class="number">1j</span>,<span class="keyword">True</span>]</span><br><span class="line">print(list)</span><br><span class="line">print(list[<span class="number">0</span>])</span><br><span class="line">print(list[<span class="number">1</span>:<span class="number">3</span>])<span class="comment">#输出第1</span></span><br><span class="line">print(list[<span class="number">2</span>:])<span class="comment">#下标从2开始输出所有，list元素下标从0开始</span></span><br><span class="line">print(list*<span class="number">2</span>)<span class="comment">#输出两次列表</span></span><br></pre></td></tr></table></figure></li><li><p>Tuple元组</p><ul><li>元组Tuple是不可以修改元素，写在()里，和list类似，只不过list写在[]里</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tuple=(<span class="string">'abcd'</span>,<span class="number">784</span>,<span class="number">1.11</span>,<span class="number">1</span>+<span class="number">2j</span>,<span class="keyword">True</span>)</span><br><span class="line">print(tuple)</span><br><span class="line">print(tuple[<span class="number">0</span>])</span><br><span class="line">print(tuple[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line">print(tuple*<span class="number">2</span>)</span><br><span class="line">tuple[<span class="number">1</span>]=<span class="number">123</span><span class="comment">#修改元素元素的操作是非法的</span></span><br></pre></td></tr></table></figure></li><li><p>Set集合</p><ul><li><p>是由一个或者多个形态各异的大小整体组成</p></li><li><p>可以使用{}大括号，或者set()函数创建集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">student=&#123;<span class="string">'tom'</span>,<span class="number">123</span>,<span class="keyword">True</span>,<span class="number">1</span>+<span class="number">2j</span>,<span class="string">'tom'</span>&#125;</span><br><span class="line">print(student)<span class="comment">#输出集合，重复的元素被自动去掉</span></span><br><span class="line"><span class="comment">#成员测试</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'tom'</span> <span class="keyword">in</span> student:</span><br><span class="line">    print(<span class="string">'tom在集合中'</span>)</span><br><span class="line"><span class="keyword">else</span> <span class="string">'Tom'</span> <span class="keyword">in</span> student:</span><br><span class="line">    print(<span class="string">'Tom不在集合中'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#set可以进行集合运算</span></span><br><span class="line">a=set(<span class="string">'Hello'</span>)</span><br><span class="line">b=set(<span class="string">'Python3'</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(a-b)<span class="comment">#a和b的差集</span></span><br><span class="line">print(a|b)<span class="comment">#a和b的并集</span></span><br><span class="line">print(a&amp;b)<span class="comment">#a和b的交集</span></span><br><span class="line">print(a^b)<span class="comment">#a和b不同是存在的元素</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Dictionary字典</p><ul><li><p>列表List是有序的对象集合，字典是无需的对象集合。</p></li><li><p>字典中的元素是通过key来存取的，列表list中是通过下标来的</p></li><li><p>字典是一种映射类型，字典用{}，一个无序的key-value集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dict=&#123;&#125;</span><br><span class="line">dict[<span class="string">'one'</span>]=<span class="string">'Hello'</span></span><br><span class="line">dict[<span class="number">2</span>]=<span class="string">'Python3'</span></span><br><span class="line">dictionary=&#123;<span class="string">'name'</span>:<span class="string">'Hello'</span>,<span class="number">1</span>:<span class="string">"Python3"</span>,<span class="keyword">True</span>:<span class="number">1</span>,<span class="number">1</span>+<span class="number">2j</span>:<span class="number">1</span>+<span class="number">2j</span>,<span class="number">1.2</span>:<span class="number">1.2</span>&#125;</span><br><span class="line">print(dict[<span class="string">'one'</span>])<span class="comment">#输出键为'one'的值</span></span><br><span class="line">print(dict[<span class="number">2</span>])<span class="comment">#输出键为2的值</span></span><br><span class="line">print(dictionary)<span class="comment">#输出完整的字典</span></span><br><span class="line">print(dictionary.keys())<span class="comment">#输出所有的key</span></span><br><span class="line">print(dictionary.values())<span class="comment">#输出所有的值</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>不可变数据：Number数字，String字符串，Tuple元组</p></li><li><p>可变数据：List列表，Dictionary字典，Set集合</p></li></ul></li></ul><h3 id="Python3编程第一步"><a href="#Python3编程第一步" class="headerlink" title="Python3编程第一步"></a>Python3编程第一步</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Fibonacci series:</span></span><br><span class="line">a,b=<span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> b&lt;<span class="number">10</span>:</span><br><span class="line">    print(b)</span><br><span class="line">    a,b=b,a+b</span><br></pre></td></tr></table></figure><h5 id="end关键字"><a href="#end关键字" class="headerlink" title="end关键字"></a>end关键字</h5><p>关键字end可以用来将结果输出到同一行，或者在输出的末尾添加不同的字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Fibonacci series:</span></span><br><span class="line">a,b=<span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> b&lt;<span class="number">10</span>:</span><br><span class="line">    print(b)</span><br><span class="line">    a,b=b,a+b</span><br><span class="line"><span class="comment">#1,1,2,3,5,8</span></span><br></pre></td></tr></table></figure><h4 id="Python3条件控制"><a href="#Python3条件控制" class="headerlink" title="Python3条件控制"></a>Python3条件控制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">condition=<span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> condition:</span><br><span class="line">    print(<span class="string">'表达式条件为true'</span>)</span><br><span class="line">    print(condition)</span><br><span class="line">condition1=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> condition1:</span><br><span class="line">    print(<span class="string">'表达式条件为true'</span>)</span><br><span class="line">    print(condition1)</span><br><span class="line">print(<span class="string">'Hello,Python3'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">age=int(input(<span class="string">'请输入年龄：'</span>))</span><br><span class="line">print(<span class="string">''</span>)</span><br><span class="line"><span class="keyword">if</span> age&lt;<span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'你在逗我吧！'</span>)</span><br><span class="line"><span class="keyword">elif</span> age==<span class="number">1</span>:</span><br><span class="line">    print(<span class="string">'相当于14岁的人'</span>)</span><br><span class="line"><span class="keyword">elif</span> age==<span class="number">2</span>:</span><br><span class="line">    print(<span class="string">'相当于22岁的人'</span>)</span><br><span class="line"><span class="keyword">elif</span> age&gt;<span class="number">2</span>:</span><br><span class="line">    human=<span class="number">22</span>+(age<span class="number">-2</span>)*<span class="number">5</span></span><br><span class="line">    print(<span class="string">'对应人的年龄：'</span>,human)</span><br><span class="line"><span class="comment">#退出提示</span></span><br><span class="line">input(<span class="string">'点击enter键退出'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">num=int(input(<span class="string">'输入一个数字：'</span>))</span><br><span class="line"><span class="keyword">if</span> num%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> num%<span class="number">3</span>==<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'输入的数字可以整除2和3'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'输入的数字可以整除2，但不能整除3'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> num%<span class="number">3</span>==<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'输入的数字可以整除3，但不能整除2'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'输入的数字不能整除2和3'</span>)</span><br></pre></td></tr></table></figure><h4 id="Python3循环语句"><a href="#Python3循环语句" class="headerlink" title="Python3循环语句"></a>Python3循环语句</h4><ul><li><p>while循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">counter=<span class="number">1</span></span><br><span class="line">n=<span class="number">100</span></span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> couter&lt;=n:</span><br><span class="line">    sum=sum+counter</span><br><span class="line">    counter+=<span class="number">1</span></span><br><span class="line">print(<span class="string">'1到%d之和为：%d'</span>%(n,sum))</span><br></pre></td></tr></table></figure></li><li><p>for循环</p><p>使用range()函数，生成数列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    print(i)</span><br><span class="line">    <span class="comment">#0,1,2,3,4</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>,<span class="number">9</span>):</span><br><span class="line">    print(i)</span><br><span class="line">    <span class="comment">#5,6,7,8</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>,<span class="number">3</span>):</span><br><span class="line">    print(i)</span><br><span class="line">    <span class="comment">#0,3,6,9</span></span><br></pre></td></tr></table></figure></li><li><p>pass语句</p><p>pass是空语句，为了保持程序结构的完整性，不做任何事情，只是用作占位语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">'Python3'</span>:</span><br><span class="line">    <span class="keyword">if</span> letter==<span class="string">'o'</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    print(<span class="string">'执行pass块'</span>)</span><br><span class="line">    print(<span class="string">'当前字母:'</span>,letter)</span><br><span class="line">print(<span class="string">'Hello,Python3'</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python的入门&quot;&gt;&lt;a href=&quot;#Python的入门&quot; class=&quot;headerlink&quot; title=&quot;Python的入门&quot;&gt;&lt;/a&gt;Python的入门&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Win+R键，输入cmd，输入python，查看版本&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="计算机" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Node.JS入门</title>
    <link href="http://yoursite.com/2018/12/12/Node-JS%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/12/12/Node-JS入门/</id>
    <published>2018-12-12T03:05:58.000Z</published>
    <updated>2018-12-12T08:14:18.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NPM使用介绍"><a href="#NPM使用介绍" class="headerlink" title="NPM使用介绍"></a>NPM使用介绍</h2><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题。</p><ul><li>允许用户从NPM服务器下载别人编写的第三方包到本地使用</li><li>允许用户从NPM服务器下载并安装别人编写好的命令程序到本地使用</li><li>允许用户将自己编写的包或者命令行程序上传到NPM服务器供别人使用</li></ul><h4 id="npm升级命令"><a href="#npm升级命令" class="headerlink" title="npm升级命令"></a>npm升级命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#使用淘宝镜像的命令</span></span></span><br><span class="line">cnpm install npm -g</span><br></pre></td></tr></table></figure><h4 id="npm命令安装模块"><a href="#npm命令安装模块" class="headerlink" title="npm命令安装模块"></a>npm命令安装模块</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;Module Name&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">安装常用的web框架模块express：</span></span><br><span class="line">npm install express</span><br><span class="line"><span class="meta">#</span><span class="bash">安装好后，express包放在工程目录下的node_modules目录中，因为在</span></span><br><span class="line"><span class="meta">#</span><span class="bash">代码中需要通过require(<span class="string">'express'</span>)方式调用就好。无需指定包路径</span></span><br><span class="line">var express=require('express');</span><br></pre></td></tr></table></figure><h4 id="使用package-json"><a href="#使用package-json" class="headerlink" title="使用package.json"></a>使用package.json</h4><p>package.json位于模块目录下，用于定义包的属性。</p><h4 id="package-json属性说明"><a href="#package-json属性说明" class="headerlink" title="package.json属性说明"></a>package.json属性说明</h4><ul><li>name:包名</li><li>versin：包的版本号</li><li>description：包的描述</li><li>homepage：包的官网url</li><li>author：包的作者姓名</li><li>contributors：包的其他贡献者姓名</li><li>dependencies：依赖包列表。如果依赖包没有安装，npm会自动将依赖包安装在node_module目录下</li><li>repository：包代码存放的地方的类型，可以是git，svn，git可在GitHub上</li><li>main：main字段制定了程序的主入口文件，require(‘module_name’)就会加载这个文件，这个字段的默认值是模块根目录下面的index.js</li><li>keywords：关键字</li></ul><h4 id="卸载模块"><a href="#卸载模块" class="headerlink" title="卸载模块"></a>卸载模块</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">卸载Node.js的web框架模块</span></span><br><span class="line">npm uninstall express</span><br><span class="line"><span class="meta">#</span><span class="bash">卸载后查看目录下的包是否存在</span></span><br><span class="line">npm ls</span><br></pre></td></tr></table></figure><h4 id="更新模块"><a href="#更新模块" class="headerlink" title="更新模块"></a>更新模块</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用命令更新模块</span></span><br><span class="line">npm update express</span><br></pre></td></tr></table></figure><h4 id="搜索模块"><a href="#搜索模块" class="headerlink" title="搜索模块"></a>搜索模块</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">搜索模块</span></span><br><span class="line">npm search express</span><br></pre></td></tr></table></figure><h4 id="使用淘宝NPM镜像"><a href="#使用淘宝NPM镜像" class="headerlink" title="使用淘宝NPM镜像"></a>使用淘宝NPM镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">国内直接使用npm的官方镜像非常慢，推荐使用淘宝NPM镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash">淘宝NPM镜像是一个完整的npmjs.org镜像。</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"><span class="meta">#</span><span class="bash">使用cnpm命令安装模块</span></span><br><span class="line">cnpm install &lt;module_name&gt;</span><br></pre></td></tr></table></figure><h4 id="Node-js-REPL交互式解释器"><a href="#Node-js-REPL交互式解释器" class="headerlink" title="Node.js REPL交互式解释器"></a>Node.js REPL交互式解释器</h4><p>Node.js REPL(Read Eval Print Loop:交互式解释器)：表示一个电脑的环境，类似Window系统的终端或者Linux shell，我们可以在终端中输入命令，并接受系统的响应</p><p>Node自带的交互式解释器可执行的任务：</p><ul><li>读取：读取用于输入，解析输入了JS数据结构并存储在内存中</li><li>执行：执行输入的数据结构</li><li>打印：输出结果</li><li>循环：循环操作以上步骤直到用户两次按下ctrl-c退出</li></ul><h4 id="输入node命令启动Node终端"><a href="#输入node命令启动Node终端" class="headerlink" title="输入node命令启动Node终端"></a>输入node命令启动Node终端</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node</span><br></pre></td></tr></table></figure><ul><li><p>表达式运算</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node</span><br></pre></td></tr></table></figure><p><img src="/2018/12/12/Node-JS入门/C:/Users\DELL\AppData\Roaming\Typora\typora-user-images\1544580173914.png" alt="1544580173914"></p></li></ul><h5 id="使用Ctrl-c两次，退出REPL终端"><a href="#使用Ctrl-c两次，退出REPL终端" class="headerlink" title="使用Ctrl+c两次，退出REPL终端"></a>使用Ctrl+c两次，退出REPL终端</h5><h4 id="Node-js回调函数"><a href="#Node-js回调函数" class="headerlink" title="Node.js回调函数"></a>Node.js回调函数</h4><p>Node.js异步编程的体现就是回调</p><p>异步编程依赖于回调实现。但是不能说使用了回调后程序就异步化</p><p>回调函数在完成任务后就会被调用，Node使用了大量的回调函数，Node所有的API都支持回调函数。</p><p>比如：我们可以一边读取文件，一边执行其他命令，文件读取完成后，将文件内容作为回调函数的参数返回，这样在执行代码就没有阻塞或者等待文件I/O操作。提高了Node.js性能，处理大量的并发请求。</p><ul><li><p>阻塞代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> data=fs.readFileSync(<span class="string">'input.txt'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"程序结束"</span>);</span><br></pre></td></tr></table></figure></li><li><p>非阻塞代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line">fs.readFile(<span class="string">'input.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'程序结束'</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;NPM使用介绍&quot;&gt;&lt;a href=&quot;#NPM使用介绍&quot; class=&quot;headerlink&quot; title=&quot;NPM使用介绍&quot;&gt;&lt;/a&gt;NPM使用介绍&lt;/h2&gt;&lt;p&gt;NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题。&lt;/p&gt;
&lt;u
      
    
    </summary>
    
      <category term="计算机" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring Boot入门</title>
    <link href="http://yoursite.com/2018/12/12/Spring-Boot%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/12/12/Spring-Boot入门/</id>
    <published>2018-12-12T03:05:35.000Z</published>
    <updated>2018-12-12T07:56:15.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Spring-Boot入门"><a href="#一、Spring-Boot入门" class="headerlink" title="一、Spring Boot入门"></a>一、Spring Boot入门</h1><p>Spring Boot来简化Spring应用开发，约定大于配置，去繁从简，just run就能创建一个独立的，产品级别的应用</p><h4 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h4><p>J2EE笨重的开发，繁多的配置，低下的开发效率，复杂的部署流程，第三方技术集成难度大</p><h4 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h4><p>“Spring全家桶”时代</p><p>Spring Boot–&gt;J2EE一站式解决方案</p><p>Spring Cloud–&gt;分布式整体解决方案</p><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul><li>快速创建独立运行的Spring项目以及主流框架集成</li><li>使用嵌入式的Servlet容器，应用无需打成WAR包</li><li>starters(启动器)自动依赖与版本控制，想用web功能就导入web功能的启动器starters，想用redis就导入redis的starters，所有的企业级开发场景都有相应的starters启动器，导入就可自动依赖。</li><li>大量的自动的配置，简化开发，也可修改默认值（通过spring boot的配置文件）</li><li>无需配置XML，无代码生成，开箱即用（都是用一些写好的API，自动配置好XML，SpringBoot应用创建出来就能用，并不是说有一些自动生成的XML工具）</li><li>准生产环境的运行时应用监控</li><li>与云计算的天然集成</li><li>ps(shift+tab退出无序列表)</li></ul><h4 id="缺点：易学难精"><a href="#缺点：易学难精" class="headerlink" title="缺点：易学难精"></a>缺点：易学难精</h4><h4 id="1、Spring-Boot简介"><a href="#1、Spring-Boot简介" class="headerlink" title="1、Spring Boot简介"></a>1、Spring Boot简介</h4><p>简化Spring应用开发的一个框架</p><p>整个Spring技术栈的一个大集合</p><p>J2EE开发的一站式解决方案</p><h4 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h4><p><a href="https://martinfowler.com/articles/microservices.html" target="_blank" rel="noopener">微服务文档</a></p><p>Microservices:a definition of this new architectural term</p><p>微服务：架构风格</p><p>the microservice architectural style  is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API.</p><p>一个应用应该是一组小型服务：可以通过HTTP的方式进行互通</p><h3 id="单体应用：ALL-IN-ONE所有的东西都写在一个里面"><a href="#单体应用：ALL-IN-ONE所有的东西都写在一个里面" class="headerlink" title="单体应用：ALL IN ONE所有的东西都写在一个里面"></a>单体应用：ALL IN ONE所有的东西都写在一个里面</h3><p>Traditional web application architecture</p><p><img src="/2018/12/12/Spring-Boot入门/C:/Users\DELL\Desktop\单体.png" alt="单体应用"></p><p>OA,CRM,ERP系统,以前都是创建一个应用然后将所有的页面，代码都放在这个应用里，然后把整个应用打包打成WAR包，然后部署到Tomcat上，应用访问数据库，提供前端访问的页面，这个应用就跑起来了，这是传统的WEB应用架构模式，传统的优点：比如开发测试简单，develop test deploy scale,开发，测试，部署，扩展也都简单。</p><p>水平扩展也简单，当我们应用负载能力不行的时候，我们把相同的应用复制上十几份，放在十几个服务器里，十几个服务器都来跑我们这些应用程序，我们通过负载均衡机制，就可以来提高我们的并发能力。</p><h4 id="单体应用的问题："><a href="#单体应用的问题：" class="headerlink" title="单体应用的问题："></a>单体应用的问题：</h4><p>这是一个牵一发而动全身的问题，有可能因为我们一个小小的修改，导致我们整个应用重新打包部署运行。</p><p>更大的挑战是我们日益增长的软件需求，现在可能随便一个应用都有可能成为一个大的需求，大应用不可能全部ALL IN ONE写在一个里面，然后应用到底有多大，该如何维护，该如何分工合作，这是一个问题。</p><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><p><img src="/2018/12/12/Spring-Boot入门/C:/Users\DELL\Desktop\微服务.png" alt="微服务"></p><h4 id="单体应用："><a href="#单体应用：" class="headerlink" title="单体应用："></a>单体应用：</h4><p>就是打破以前的传统方式，以前是将所有的功能单元放在一个应用里面。然后把整个应用部署到服务器上，如果服务器负载能力不行，把同一份应用水平复制，然后扩展到其他服务器。</p><h4 id="微服务："><a href="#微服务：" class="headerlink" title="微服务："></a>微服务：</h4><p>一个微服务架构把每个功能元素放进一个独立的服务中，把每个功能元素独立出来，通过功能元素的动态组合，比如A服务器需要某个功能元素多，就多放一点，B服务器需要某个功能元素少，就少放一点</p><p>并且通过跨服务器分发这些服务进行扩展，某些功能只在需要时才复制。也就是功能元素级别的复制，并不是整个应用的复制。1、节省了调用资源，把服务微化起来2、每一个服务都应该是一个可替换的，可独立升级的软件单元</p><p><img src="/2018/12/12/Spring-Boot入门/C:/Users\DELL\Desktop\timg.jpg" alt="两者区别"></p><p>每一个功能元素最终都是可独立替换，可独立升级的软件单元</p><h4 id="SOA架构和微服务架构区别："><a href="#SOA架构和微服务架构区别：" class="headerlink" title="SOA架构和微服务架构区别："></a>SOA架构和微服务架构区别：</h4><ul><li><p>SOA(Service Oriented Architecture)：面向服务的架构，一种设计方法，其中包含多个服务，服务之间通过相互依赖最终提供一系列的功能，一个服务通常以独立的形式存在于操作系统进程中，各个服务之间通过网络调用。</p></li><li><p>微服务架构：其实和SOA架构类似，微服务是在SOA上做的升华，微服务架构强调的一个重点是“业务需要彻底的组件化和服务化”，原有的但各业务系统会拆分成多个可以独立开发，设计，运行的小应用</p><p>这些小应用之间通过服务完成交互和集成</p></li></ul><h4 id="主要区别："><a href="#主要区别：" class="headerlink" title="主要区别："></a>主要区别：</h4><table><thead><tr><th style="text-align:center">功能</th><th style="text-align:center">SOA</th><th style="text-align:center">微服务</th></tr></thead><tbody><tr><td style="text-align:center">组件大小</td><td style="text-align:center">大块业务逻辑</td><td style="text-align:center">单独任务或小块业务逻辑</td></tr><tr><td style="text-align:center">耦合</td><td style="text-align:center">通常松耦合</td><td style="text-align:center">总是松耦合</td></tr><tr><td style="text-align:center">公司架构</td><td style="text-align:center">任何类型</td><td style="text-align:center">小型，专注于功能交叉团队</td></tr><tr><td style="text-align:center">管理</td><td style="text-align:center">着重中央管理</td><td style="text-align:center">着重分散管理</td></tr><tr><td style="text-align:center">目标</td><td style="text-align:center">确保应用能够交互操作</td><td style="text-align:center">执行新功能，快速拓展开发团队</td></tr></tbody></table><h3 id="掌握内容："><a href="#掌握内容：" class="headerlink" title="掌握内容："></a>掌握内容：</h3><ul><li>Spring框架</li><li>熟练使用Maven进行项目构建和依赖管理</li><li>熟练使用Eclipse、IDEA</li></ul><h3 id="环境约束："><a href="#环境约束：" class="headerlink" title="环境约束："></a>环境约束：</h3><ul><li>JDK1.8</li><li>Maven3.x:Maven 3.3以上版本</li><li>IntelliJ IDEA</li><li>Spring Boot 1.5.9.RELEASE</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、Spring-Boot入门&quot;&gt;&lt;a href=&quot;#一、Spring-Boot入门&quot; class=&quot;headerlink&quot; title=&quot;一、Spring Boot入门&quot;&gt;&lt;/a&gt;一、Spring Boot入门&lt;/h1&gt;&lt;p&gt;Spring Boot来简化Spri
      
    
    </summary>
    
      <category term="计算机" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>about</title>
    <link href="http://yoursite.com/2018/12/12/about/"/>
    <id>http://yoursite.com/2018/12/12/about/</id>
    <published>2018-12-12T02:55:23.000Z</published>
    <updated>2018-12-12T08:14:34.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p>欢迎来到我的博客，这是一个热衷于技术分享，涉及软件开发， 计算机基础，高等数学，数据库，人工智能等热门前沿技术的分享论坛。</p><h4 id="email-1397743321-qq-com"><a href="#email-1397743321-qq-com" class="headerlink" title="email:1397743321@qq.com"></a>email:<a href="mailto:1397743321@qq.com" target="_blank" rel="noopener">1397743321@qq.com</a></h4><h4 id="微信公众号：Victor的分享论坛"><a href="#微信公众号：Victor的分享论坛" class="headerlink" title="微信公众号：Victor的分享论坛"></a>微信公众号：Victor的分享论坛</h4><h4 id="博客园：https-www-cnblogs-com-drq1"><a href="#博客园：https-www-cnblogs-com-drq1" class="headerlink" title="博客园：https://www.cnblogs.com/drq1/"></a>博客园：<a href="https://www.cnblogs.com/drq1/" target="_blank" rel="noopener">https://www.cnblogs.com/drq1/</a></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于&quot;&gt;&lt;a href=&quot;#关于&quot; class=&quot;headerlink&quot; title=&quot;关于&quot;&gt;&lt;/a&gt;关于&lt;/h2&gt;&lt;p&gt;欢迎来到我的博客，这是一个热衷于技术分享，涉及软件开发， 计算机基础，高等数学，数据库，人工智能等热门前沿技术的分享论坛。&lt;/p&gt;
&lt;h4 
      
    
    </summary>
    
      <category term="关于" scheme="http://yoursite.com/categories/%E5%85%B3%E4%BA%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="http://yoursite.com/2018/12/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2018/12/12/数据结构/</id>
    <published>2018-12-12T02:36:17.000Z</published>
    <updated>2018-12-12T08:10:23.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h4 id="线性表：顺序存储——顺序表"><a href="#线性表：顺序存储——顺序表" class="headerlink" title="线性表：顺序存储——顺序表"></a>线性表：顺序存储——顺序表</h4><h4 id="链式存储—-单链表，双链表，循环链表—指针实现"><a href="#链式存储—-单链表，双链表，循环链表—指针实现" class="headerlink" title="链式存储—-单链表，双链表，循环链表—指针实现"></a>链式存储—-单链表，双链表，循环链表—指针实现</h4><h4 id="静态链表（借助数组实现）"><a href="#静态链表（借助数组实现）" class="headerlink" title="静态链表（借助数组实现）"></a>静态链表（借助数组实现）</h4><h4 id="线性表的基本操作："><a href="#线性表的基本操作：" class="headerlink" title="线性表的基本操作："></a>线性表的基本操作：</h4><ul><li>InitList(&amp;L)</li><li>Length(L)</li><li>LocateElem(L,e)</li><li>ListInsert(&amp;L,i,e)</li><li>ListDelete(&amp;L,i,&amp;e)</li><li>PrintList(L)</li><li>DestroyList(&amp;L)</li></ul><p>注：&amp;是C++中的引用，传入的变量是指针型的变量</p><p>函数体内要对传入的指针进行改变，将用到执行变量的引用</p><p>C中采用*，指针的效果也可以</p><h4 id="顺序表的定义"><a href="#顺序表的定义" class="headerlink" title="顺序表的定义"></a>顺序表的定义</h4><p>地址连续的存储单元，依次存储线性表中的数据元素，逻辑上相邻的两个元素在物理位置上也相邻。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 50<span class="comment">//定义线性表的最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    ElemType data[MaxSize];<span class="comment">//顺序表的元素</span></span><br><span class="line">    <span class="keyword">int</span> length;<span class="comment">// 顺序表当前长度   </span></span><br><span class="line">&#125;SqList;<span class="comment">//顺序表的类型定义</span></span><br><span class="line">一位数组静态分配，动态分配。</span><br><span class="line">静态分配：数组大小和空间已经固定，当空间占满，再加入元素，将产生溢出，导致程序崩溃</span><br><span class="line">动态分配：存储数组的空间在程序执行过程中通过动态分配语句分配的。</span><br><span class="line">一旦数据空间站满，可以另外开辟一块更大的存储空间，替换原来的存储空间。</span><br><span class="line">从而达到扩充存储数组空间的目的</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> InitSize 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">ElemType *data;</span><br><span class="line">    <span class="keyword">int</span> MaxSize,length;</span><br><span class="line">&#125;SeqList;</span><br><span class="line">C的动态分配：</span><br><span class="line">L.dada=(ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType)*InitSize)</span><br><span class="line">C++的动态分配：</span><br><span class="line">L.data=<span class="keyword">new</span> ElemType[InitSize];</span><br></pre></td></tr></table></figure><p>注：顺序表的主要特点：随机访问，通过首地址和元素序号可以再O(1)的时间内</p><p>找到指定的元素。</p><p>顺序表的存储密度高，每个节点只存储数据元素</p><p>顺序比哦啊逻辑上相邻的元素物理上也是相邻。插入和删除需要移动大量元素</p><h4 id="顺序表的基本操作-实现"><a href="#顺序表的基本操作-实现" class="headerlink" title="顺序表的基本操作 实现"></a>顺序表的基本操作 实现</h4><ul><li><p>插入操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> i,ElemType e)</span></span>&#123;<span class="comment">//本算法实现将元素e插入到顺序表L中第i个位置,注：第i个位置的元素，数组下标是i-1</span></span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L.length+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(L.length&gt;=MaxSize)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=L.lenght;j&gt;=i;j--)<span class="comment">//将第i个元素以及后面的元素后移</span></span><br><span class="line">        L.data[j]=L.data[j<span class="number">-1</span>];</span><br><span class="line">    L.data[i<span class="number">-1</span>]=e;<span class="comment">//在位置i处放入e</span></span><br><span class="line">    L.length++;<span class="comment">//线性表长度+1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//时间复杂度：O(n)</span></span><br></pre></td></tr></table></figure></li><li><p>删除操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> i,ElemType &amp;e)</span></span>&#123;<span class="comment">//将顺序表L中第i个位置的元素删除</span></span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L.length)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e=L.data[i<span class="number">-1</span>];<span class="comment">//将被删除的元素赋值给e</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;L.length;j++)<span class="comment">//将第i个位置之后的元素向前移动</span></span><br><span class="line">        L.data[j<span class="number">-1</span>]=L.data[j];</span><br><span class="line">    L.length--;<span class="comment">//线性表长度-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//时间复杂度：O(n)</span></span><br></pre></td></tr></table></figure></li><li><p>按值查找（顺序查找）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(SqList L,ElemType e)</span></span>&#123;</span><br><span class="line">    <span class="comment">//查找顺序表L中值为e的元素，返回元素的位置号，下标为i的元素，是第i+1个位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)</span><br><span class="line">        <span class="keyword">if</span>(L.data[i]==e)</span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//时间复杂度：O(1)</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p>顺序表的插入，删除需要移动大量元素，引入线性表的链式存储。不需要使用地址连续的存储单元</p><p>不要求逻辑上相邻的两个元素在物理位置上相邻。</p><h5 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="comment">//单链表的节点</span></span><br><span class="line">    ElemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span><span class="comment">//指针域</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br></pre></td></tr></table></figure><p>注：用头指针标识一个单链表，如果单链表L，L-&gt;next=NULL，表示为一个空表</p><p>头结点，头指针区别：</p><p>不管带不带头结点，头指针始终只想链表的第一个节点，头结点是一个带头结点链表的第一个节点</p><p>通常节点不存储信息。</p><ul><li><p>头插法建立单链表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">CreateList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    Node *s;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    L=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));<span class="comment">//创建头结点</span></span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;<span class="comment">//头指针为空，初始化为空表</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);<span class="comment">//输入节点的值</span></span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">        s=(Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        s-&gt;data=x;</span><br><span class="line">        s-&gt;next=L-&gt;next;<span class="comment">//s放在L-&gt;next是下一个元素之前</span></span><br><span class="line">        L-&gt;next=s;<span class="comment">//头指针L-&gt;next指向s</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入时间复杂度：O(1)</span></span><br></pre></td></tr></table></figure></li><li><p>尾插法建立单链表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">CreateList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    L=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node);</span><br><span class="line">    Node *s,*r=L;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">        s=(Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        s-&gt;data=x;</span><br><span class="line">        r-&gt;next=s;<span class="comment">//尾指针r等于L,让r-&gt;next指向新插入的节点s</span></span><br><span class="line">        r=s;<span class="comment">//调整尾指针r指向s</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> L;                   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//时间复杂度：O(n)</span></span><br></pre></td></tr></table></figure></li><li><p>按序号查找节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node *<span class="title">GetElem</span><span class="params">(LinkList L,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="comment">//取出单链表L中第i个位置的节点指针</span></span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line">    LNode *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> L;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p&amp;&amp;i&gt;flag)&#123;<span class="comment">//从第i个节点开始找，查找第i个节点</span></span><br><span class="line">        p=p-&gt;next;<span class="comment">//import step循环。</span></span><br><span class="line">        flag++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;<span class="comment">//返回第i个节点的指针，如果i大于表长，p=NULL</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//时间复杂度：O(n)</span></span><br></pre></td></tr></table></figure></li><li><p>按照值来查找节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node *<span class="title">LocateElem</span><span class="params">(LinkList L,ElemType e)</span></span>&#123;</span><br><span class="line">    <span class="comment">//查找单链表L，数据域值为e的节点指针，否则返回NULL</span></span><br><span class="line">    Node *P=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;p-&gt;data!=e)&#123;</span><br><span class="line">        p=p-&gt;next;<span class="comment">//从第1个节点开始查找data域为e的节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//时间复杂度：O(n)</span></span><br></pre></td></tr></table></figure></li><li><p>插入节点操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p=GetElem(L,i<span class="number">-1</span>);</span><br><span class="line">s-&gt;next=p-&gt;next;</span><br><span class="line">p-&gt;next=s;</span><br></pre></td></tr></table></figure></li><li><p>删除节点操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p=GetElem(L,i<span class="number">-1</span>);</span><br><span class="line">q=p-&gt;next;</span><br><span class="line">p-&gt;next=q-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);   </span><br><span class="line"></span><br><span class="line"><span class="comment">//method 2：</span></span><br><span class="line">p-&gt;data=p-&gt;next-&gt;data;</span><br><span class="line">p-&gt;next=p-&gt;next-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p-&gt;next)</span><br></pre></td></tr></table></figure></li></ul><h4 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h4><p>单链表的节点中只有一个指向后继的指针，单链表只能从头结点依次顺序的向后遍历</p><p>想访问某个节点的前驱节点，比如插入，删除，只能从头遍历。</p><h5 id="双链表的节点："><a href="#双链表的节点：" class="headerlink" title="双链表的节点："></a>双链表的节点：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>&#123;</span></span><br><span class="line">    ElemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">prior</span>,*<span class="title">next</span>;</span><span class="comment">//前驱，后继指针</span></span><br><span class="line">&#125;DNode,*DLinkList;</span><br></pre></td></tr></table></figure><p>关键在于保证在修改的过程不断链。双链表可以方便的找到前驱节点。插入、删除节点的时间复杂度仅为O(1)</p><ul><li><p>双链表的插入操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s-&gt;next=p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;prior=s;</span><br><span class="line">s-&gt;prior=p;</span><br><span class="line">p-&gt;next=s;</span><br></pre></td></tr></table></figure></li><li><p>双链表的删除操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;next=q-&gt;next;</span><br><span class="line">q-&gt;next-&gt;prior=p;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br></pre></td></tr></table></figure></li></ul><h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4><p>循环链表与单链表的区别：表中最后一个节点的指针不为NULL，改为指向头结点。</p><p>单链表中只能从表头节点开始往后顺序遍历整个链表，而循环单链表可以从表中的任一节点开始遍历整个链表。有时对单链表常做的操作是在表头和表尾进行的，此时可对循环单链表不设头指针而设尾指针。</p><h4 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h4><p>是借助数组来描述线性表的链式存储结构，节点也有数据域data和指针域next。</p><p>指针是数组的下标，也叫游标。</p><h5 id="静态链表结构的定义："><a href="#静态链表结构的定义：" class="headerlink" title="静态链表结构的定义："></a>静态链表结构的定义：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 50</span></span><br><span class="line">typedf <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">&#125;SLinkList[MaxSize];</span><br></pre></td></tr></table></figure><h1 id="栈Stack"><a href="#栈Stack" class="headerlink" title="栈Stack"></a>栈Stack</h1><h4 id="栈的基本操作："><a href="#栈的基本操作：" class="headerlink" title="栈的基本操作："></a>栈的基本操作：</h4><ul><li><p>InitStack(&amp;S):初始化一个空栈S</p></li><li><p>StackEmpty(S)：判断一个栈是否为空，S为空返回true，否则false</p></li><li><p>Push(&amp;S,x)：进栈，如果栈S未满，将x加入让它成为新的栈顶</p></li><li><p>Pop(&amp;S,&amp;x)：出栈，如果栈S非空，弹出栈顶元素，并用x返回</p></li><li><p>GetTop(S,&amp;x)：读取栈顶元素 ，如果栈S非空，用x返回栈顶元素</p></li><li><p>ClearStack(&amp;S)：销毁栈，并释放栈S占用的存储空间</p><p>注：&amp;是C++的特有，用来引用，采用C的写法是*，用来传达地址的目的</p></li></ul><h4 id="顺序栈："><a href="#顺序栈：" class="headerlink" title="顺序栈："></a>顺序栈：</h4><ul><li><p>顺序栈的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#define MaxSize 50</span><br><span class="line">typedef struct&#123;</span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    int top;</span><br><span class="line">&#125;SqStack;</span><br><span class="line">栈顶指针：初始化为S.top=-1</span><br><span class="line">栈顶元素：S.data[S.top]</span><br><span class="line">进栈操作：S is not full,top++</span><br><span class="line">出栈操作：S is not empty,get top ,top--</span><br><span class="line">栈空条件:S.top==-1</span><br><span class="line">栈满条件：S.top==MaxSize-1</span><br><span class="line">栈长：S.top+1</span><br></pre></td></tr></table></figure></li><li><p>顺序栈的基本运算</p><ul><li><p>初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span></span>&#123;</span><br><span class="line">    S.top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断栈空</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>进栈</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(SqStack &amp;S,ElemType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==MaxSize<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    S.data[++S.top]=x;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>出栈</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">boop <span class="title">Pop</span><span class="params">(SqStack &amp;S,ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x=S.data[S.top--];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>读取栈顶元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetTop</span><span class="params">(SqStack S,ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x=S.data[S.top--];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="链式栈"><a href="#链式栈" class="headerlink" title="链式栈"></a>链式栈</h4><ul><li><p>链栈的节点定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;*ListStack;</span><br></pre></td></tr></table></figure></li></ul><h1 id="队列Queue"><a href="#队列Queue" class="headerlink" title="队列Queue"></a>队列Queue</h1><h4 id="队列的常见基本操作"><a href="#队列的常见基本操作" class="headerlink" title="队列的常见基本操作"></a>队列的常见基本操作</h4><ul><li>InitQueue(&amp;Q)：初始化队列，构建一个空队列Q</li><li>QueueEmpty(Q)：判断队列为空，Q为空返回true，否则false</li><li>EnQueue(&amp;Q,x)：入队，若队列Q未满，将x加入，成为新的队尾</li><li>DeQueue(&amp;Q,&amp;x)：出队，若队列Q非空，将队头元素赋值给x</li><li>GetHead(Q,&amp;x)：读取队头元素，若队列Q非空，将队头元素赋值给x</li></ul><h5 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h5><ul><li><p>节点定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 50</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="keyword">int</span> front,rear;</span><br><span class="line">&#125;SqQueue;</span><br><span class="line">队空条件：Q.front==Q.rear==<span class="number">0</span></span><br><span class="line">进队操作：Queue is <span class="keyword">not</span> full,enqueue data,rear+<span class="number">1</span></span><br><span class="line">出队操作：Queue is <span class="keyword">not</span> empty,dequeue data,front+<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>循环队列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">初始化：Q.front==Q.rear=0</span><br><span class="line">队首指针rear：Q.rear=(Q.front+1)%MaxSize</span><br><span class="line">队尾指针front:Q.rear=(Q.rear+1)%MaxSize</span><br><span class="line">队列长度：(Q.rear+MaxSize-Q.front)%MaxSize</span><br><span class="line">队满条件：(Q.rear+1)%MaxSize==Q.front</span><br><span class="line">队空条件：Q.front==Q.rear</span><br><span class="line">队中元素个数：(Q.rear-Q.front+MaxSize)%MaxSize</span><br></pre></td></tr></table></figure></li><li><p>循环队列的操作</p><ul><li><p>初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span></span>&#123;</span><br><span class="line">    Q.rear=Q.front=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断队空</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(SqQueue Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.rear==Q.front)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>入队</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q,ElemType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((Q.rear+<span class="number">1</span>)%MaxSize==Q.front)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    Q.data[Q.rear]=x;</span><br><span class="line">    Q.rear=(Q.rear+<span class="number">1</span>)%MaxSize;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>出队</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(SqQueue &amp;Q,ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.rear==Q.front)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x=Q.data[Q.front];</span><br><span class="line">    Q.front=(Q.front+<span class="number">1</span>)%MaxSize;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="链队"><a href="#链队" class="headerlink" title="链队"></a>链队</h4><ul><li><p>链队节点定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span></span></span><br><span class="line"><span class="class">&#125;<span class="title">LinkNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    LinkNode *front,*rear;</span><br><span class="line">&#125;LinkQueue;</span><br></pre></td></tr></table></figure></li><li><p>链式队列的基本操作</p><ul><li><p>初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span></span>&#123;</span><br><span class="line">    Q.front=Q.rear=(LinkNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">    Q.front-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断队空</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(LinkQueue Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front==Q.rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>入队</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(LinkQueue &amp;Q,ElemType x)</span></span>&#123;</span><br><span class="line">    s=(LinkNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">    s-&gt;data=x;</span><br><span class="line">    s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    Q.rear-&gt;next=s;</span><br><span class="line">    Q.rear=s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>出队</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(LinkQueue &amp;Q,ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front==Q.rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p=Q.front-&gt;next;</span><br><span class="line">    x=p-&gt;data;</span><br><span class="line">    Q.front-&gt;next=p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(Q.rear==p)</span><br><span class="line">        Q.rear=Q.front;<span class="comment">//原来队列中如果只有一个节点，删除后变为空</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="队列在计算机系统中的应用"><a href="#队列在计算机系统中的应用" class="headerlink" title="队列在计算机系统中的应用"></a>队列在计算机系统中的应用</h4><p>队列在计算机系统中应用非常广泛：</p><ul><li><p>解决主机CPU与外部设备IO之间的速度不匹配问题</p></li><li><p>解决由多用户引起的资源竞争问题</p><p>主机与打印机之间速度不匹配的问题：主机输出数据给打印机打印，输出数据的速度比打印数据的速度要快很多。由于速度不匹配，如果直接把输出的数据送给打印机打印显然是不行的</p><p>解决方法：设置一个打印数据的缓冲区，主机把要打印输出的数据依次写入到这个缓冲区。写满后就暂停输出，转去做其他事情。打印机就从缓冲区中按照先进先出的原则依次取出数据并打印。打印完后再向主机发出请求。</p><p>CPU资源的竞争是一个典型的队列应用问题。在一个带有终端的计算机系统上，有多个用户需要CPU格子运行自己的程序，它们分别通过各自的终端向系统提出占用CPU的请求。操作系统通常按照每个用户请求在时间上的先后顺序，把它们排成一个队列。每次把CPU分配给队首的用户使用。当相应的程序运行结束后，或者用户用完规定的时间片后，让它出队，再把CPU分配给新的队首请求的用户使用。</p></li></ul><h4 id="括号匹配问题"><a href="#括号匹配问题" class="headerlink" title="括号匹配问题"></a>括号匹配问题</h4><p>算法思想：扫描每个字符，遇到花，中，圆左括号进栈，遇到花，中，圆有括号出栈</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BracketsCheck</span><span class="params">(<span class="keyword">char</span> *str)</span></span>&#123;</span><br><span class="line">    InitStack(SqStack S);</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(str[i]!=<span class="string">'\0'</span>)&#123;</span><br><span class="line">        <span class="keyword">switch</span>(str[i])&#123;</span><br><span class="line">            <span class="comment">//左括号入栈    </span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'('</span>:Push(S,<span class="string">'('</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'['</span>:Push(S,<span class="string">'['</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&#123;'</span>:Push(S,<span class="string">'&#123;'</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//遇到右括号，检测栈顶</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">')'</span>:Pop(S,e);</span><br><span class="line">                <span class="keyword">if</span>(e!=<span class="string">'('</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">']'</span>:Pop(S,e);</span><br><span class="line">                <span class="keyword">if</span>(e!=<span class="string">'['</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&#125;'</span>:Pop(S,e);</span><br><span class="line">                <span class="keyword">if</span>(e!=<span class="string">'&#123;'</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:<span class="keyword">break</span>;    </span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!IsEmpty(S))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"括号不匹配\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"括号匹配\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="树与二叉树"><a href="#树与二叉树" class="headerlink" title="树与二叉树"></a>树与二叉树</h1><ul><li><p>二叉树链式存储节点：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br></pre></td></tr></table></figure></li><li><p>二叉树的遍历</p><ul><li><p>先序遍历PreOrder</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        visit(T);</span><br><span class="line">        PreOrder(T-&gt;lchild);</span><br><span class="line">        PreOrder(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>中序遍历InOrder</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">    InOrder(T-&gt;lchild);</span><br><span class="line">    visit(T);</span><br><span class="line">    InOrder(T-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后序遍历PostOrder</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        PostOrder(T-&gt;lchild);</span><br><span class="line">        PostOrder(T-&gt;rchild);</span><br><span class="line">        visit(T);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三种遍历方式的时间复杂度，空间复杂度都为O(n)</p></li><li><p>层次遍历LevelOrder</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrder</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="comment">//需要借助到队列Queue</span></span><br><span class="line">    InitQueue(Q);</span><br><span class="line">    BiTree p;</span><br><span class="line">    EnQueue(Q,T);<span class="comment">//根节点入队</span></span><br><span class="line">    <span class="keyword">while</span>(!IsEmpty(Q))&#123;</span><br><span class="line">        DeQueue(Q,p);<span class="comment">//队列不空，队头元素出队</span></span><br><span class="line">        visit(p);</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;lchild!=<span class="literal">NULL</span>)</span><br><span class="line">            EnQueue(Q,p-&gt;lchild);<span class="comment">//左子树不空，左子树入队</span></span><br><span class="line">        <span class="keyword">if</span>(p-&gt;rchild!=<span class="literal">NULL</span>)</span><br><span class="line">            EnQueue(Q,p-&gt;rchild);<span class="comment">//右子树不空，右子树入队</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>中序遍历非递归</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(BiTree T)</span></span>&#123;<span class="comment">//需要借助一个栈</span></span><br><span class="line">    InitStack(S);<span class="comment">//初始化栈S，</span></span><br><span class="line">    BiTree p=T;<span class="comment">//p是遍历指针</span></span><br><span class="line">    <span class="keyword">while</span>(p||!IsEmpty(S))&#123;<span class="comment">//栈不为空，p不空循环</span></span><br><span class="line">        <span class="keyword">if</span>(p)&#123;</span><br><span class="line">            Push(S,p);<span class="comment">//根指针进栈</span></span><br><span class="line">            p=p-&gt;lchild;<span class="comment">//遍历左子树</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            Pop(S,p);<span class="comment">//根指针出栈</span></span><br><span class="line">            visit(p);<span class="comment">//访问根节点</span></span><br><span class="line">            p=p-&gt;rchild<span class="comment">//遍历右子树</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后序遍历非递归</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    InitStack(S);</span><br><span class="line">    BiTree p=T;<span class="comment">//p是遍历指针</span></span><br><span class="line">    BiTree r=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p||!IsEmpty(S))&#123;</span><br><span class="line">        <span class="keyword">if</span>(p)&#123;<span class="comment">//走到最左边</span></span><br><span class="line">            push(S,p);</span><br><span class="line">            p=p-&gt;lchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;<span class="comment">//向右</span></span><br><span class="line">            GetTop(S,p);<span class="comment">//获取栈顶节点</span></span><br><span class="line">            <span class="keyword">if</span>(p-&gt;rchild&amp;&amp;p-&gt;rchild!=r)&#123;<span class="comment">//如果右子树存在，且未被访问</span></span><br><span class="line">                p=p-&gt;rchild;<span class="comment">//转向右子树</span></span><br><span class="line">                push(S,p);<span class="comment">//将右子树节点进栈</span></span><br><span class="line">                p=p-&gt;lchild;<span class="comment">//然后转向最左边</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;<span class="comment">//没有右子树，弹出节点并访问</span></span><br><span class="line">                pop(S,p);<span class="comment">//将节点弹出</span></span><br><span class="line">                visit(p-&gt;data);<span class="comment">//访问节点</span></span><br><span class="line">                r=p;<span class="comment">//记录最近访问的节点</span></span><br><span class="line">                p=<span class="literal">NULL</span>;<span class="comment">//节点访问完后，重置p指针</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="二叉排序树BST"><a href="#二叉排序树BST" class="headerlink" title="二叉排序树BST"></a>二叉排序树BST</h4><p>也叫二叉查找树，左&lt;根&lt;右</p><ul><li><p>二叉排序树的查找</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BSTNode *<span class="title">BST_search</span><span class="params">(BiTree T,ElemType key,BSTNode *&amp;p)</span></span>&#123;</span><br><span class="line">    p=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(T!=<span class="literal">NULL</span>&amp;&amp;key!=T-&gt;data)&#123;</span><br><span class="line">        p=T;</span><br><span class="line">        <span class="keyword">if</span>(key&lt;T-&gt;data)</span><br><span class="line">            T=T-&gt;lchild;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            T=T-&gt;rchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>二叉排序树的插入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BST_Insert</span><span class="params">(BiTree &amp;T,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        T=(BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BSTNode));</span><br><span class="line">        T-&gt;key=k;</span><br><span class="line">        T-&gt;lchild=T-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//返回1，表示成功</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(k==T-&gt;key)<span class="comment">//树中存在相同的关键字节点，返回0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(k&lt;T-&gt;key)<span class="comment">//递归，插入到T的左子树中</span></span><br><span class="line">        <span class="keyword">return</span> BST_Insert(T-&gt;lchild,k);</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//递归，插入到T的右子树中</span></span><br><span class="line">        <span class="keyword">return</span> BST_Insert(T-&gt;rchild,k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>二叉排序树的构造</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create_BST</span><span class="params">(BiTree &amp;T,<span class="keyword">char</span> str[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    T=<span class="literal">NULL</span>;<span class="comment">//初始化的时候T为空树</span></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n)&#123;<span class="comment">//依次将每个元素插入</span></span><br><span class="line">        BST_Insert(T,str[i]);</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="平衡二叉树VAL"><a href="#平衡二叉树VAL" class="headerlink" title="平衡二叉树VAL"></a>平衡二叉树VAL</h4><p>平衡二叉树的各个节点的平衡因子只能为-1,0,1 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h1&gt;&lt;h4 id=&quot;线性表：顺序存储——顺序表&quot;&gt;&lt;a href=&quot;#线性表：顺序存储——顺序表&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="计算机" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello ，Hexo</title>
    <link href="http://yoursite.com/2018/12/12/hello-world/"/>
    <id>http://yoursite.com/2018/12/12/hello-world/</id>
    <published>2018-12-12T02:29:28.712Z</published>
    <updated>2018-12-12T08:14:50.032Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="关于" scheme="http://yoursite.com/categories/%E5%85%B3%E4%BA%8E/"/>
    
    
  </entry>
  
</feed>
